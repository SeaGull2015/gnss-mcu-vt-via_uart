
gnss-mcu-vt-via_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038e8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08003a88  08003a88  00013a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bf4  08003bf4  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  08003bf4  08003bf4  00013bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bfc  08003bfc  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bfc  08003bfc  00013bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c00  08003c00  00013c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08003c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000110  08003d14  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08003d14  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f15  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001527  00000000  00000000  00028055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f0  00000000  00000000  00029580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000668  00000000  00000000  00029c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000161ec  00000000  00000000  0002a2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000086bb  00000000  00000000  000404c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008649c  00000000  00000000  00048b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf01b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002340  00000000  00000000  000cf06c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000110 	.word	0x20000110
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003a70 	.word	0x08003a70

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000114 	.word	0x20000114
 80001dc:	08003a70 	.word	0x08003a70

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <parseGNSS>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char parseResult[] = "\nlatitude is .. ........, longitude is ... ........, height is ......... M\r\n";
char permParseResult[] = "\nlatitude is .. ........, longitude is ... ........, height is ......... M\r\n";

int parseGNSS(uint8_t input[inputSize]){ // we want to find $GPGGA because it contains height, then parse it to spit out the longitude, latitude, height.
 8000584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000588:	b0da      	sub	sp, #360	; 0x168
 800058a:	af00      	add	r7, sp, #0
 800058c:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
	int64_t start = INT_MAX - 1;
 8000590:	4a5a      	ldr	r2, [pc, #360]	; (80006fc <parseGNSS+0x178>)
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
	int64_t temp_iter;
	char currentProtocol[6];
	bool identical = true;
 800059a:	2301      	movs	r3, #1
 800059c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	for (int i = 0; i < inputSize; i++){
 80005a0:	2300      	movs	r3, #0
 80005a2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80005a6:	e077      	b.n	8000698 <parseGNSS+0x114>
		if (input[i] == '$'){
 80005a8:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80005ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80005b0:	4413      	add	r3, r2
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b24      	cmp	r3, #36	; 0x24
 80005b6:	d16a      	bne.n	800068e <parseGNSS+0x10a>
			for (int j = i; (j < (i + 6)) && (j < inputSize); j++){
 80005b8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80005bc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80005c0:	e021      	b.n	8000606 <parseGNSS+0x82>
				currentProtocol[j-i] = input[j];
 80005c2:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80005c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80005ca:	1899      	adds	r1, r3, r2
 80005cc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80005d0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80005d4:	1ad3      	subs	r3, r2, r3
 80005d6:	7809      	ldrb	r1, [r1, #0]
 80005d8:	3340      	adds	r3, #64	; 0x40
 80005da:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80005de:	189a      	adds	r2, r3, r2
 80005e0:	460b      	mov	r3, r1
 80005e2:	f802 3c34 	strb.w	r3, [r2, #-52]
				temp_iter = j;
 80005e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80005ea:	17da      	asrs	r2, r3, #31
 80005ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80005f0:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80005f4:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 80005f8:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
			for (int j = i; (j < (i + 6)) && (j < inputSize); j++){
 80005fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000600:	3301      	adds	r3, #1
 8000602:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000606:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800060a:	1d5a      	adds	r2, r3, #5
 800060c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000610:	4293      	cmp	r3, r2
 8000612:	dc03      	bgt.n	800061c <parseGNSS+0x98>
 8000614:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000618:	2b9f      	cmp	r3, #159	; 0x9f
 800061a:	ddd2      	ble.n	80005c2 <parseGNSS+0x3e>
			}
			if (temp_iter >= inputSize) printf("\nmoved over the edge of the input, trying to find the $GPwhatever, j >= inputSize\r\n");
 800061c:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8000620:	2aa0      	cmp	r2, #160	; 0xa0
 8000622:	f173 0300 	sbcs.w	r3, r3, #0
 8000626:	db02      	blt.n	800062e <parseGNSS+0xaa>
 8000628:	4835      	ldr	r0, [pc, #212]	; (8000700 <parseGNSS+0x17c>)
 800062a:	f002 faa3 	bl	8002b74 <puts>
			for (int j = 0; j < 6; j++){
 800062e:	2300      	movs	r3, #0
 8000630:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8000634:	e014      	b.n	8000660 <parseGNSS+0xdc>
				if (currentProtocol[j] != "$GPGGA"[j]) identical = false;
 8000636:	f507 729a 	add.w	r2, r7, #308	; 0x134
 800063a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800063e:	4413      	add	r3, r2
 8000640:	7819      	ldrb	r1, [r3, #0]
 8000642:	4a30      	ldr	r2, [pc, #192]	; (8000704 <parseGNSS+0x180>)
 8000644:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8000648:	4413      	add	r3, r2
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	4299      	cmp	r1, r3
 800064e:	d002      	beq.n	8000656 <parseGNSS+0xd2>
 8000650:	2300      	movs	r3, #0
 8000652:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			for (int j = 0; j < 6; j++){
 8000656:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800065a:	3301      	adds	r3, #1
 800065c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8000660:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8000664:	2b05      	cmp	r3, #5
 8000666:	dde6      	ble.n	8000636 <parseGNSS+0xb2>
			}
			if (identical) {
 8000668:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 800066c:	2b00      	cmp	r3, #0
 800066e:	d00b      	beq.n	8000688 <parseGNSS+0x104>
				start = i;
 8000670:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000674:	17da      	asrs	r2, r3, #31
 8000676:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800067a:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800067e:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8000682:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
				break;
 8000686:	e00b      	b.n	80006a0 <parseGNSS+0x11c>
			}
			else identical = true;
 8000688:	2301      	movs	r3, #1
 800068a:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	for (int i = 0; i < inputSize; i++){
 800068e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000692:	3301      	adds	r3, #1
 8000694:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000698:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800069c:	2b9f      	cmp	r3, #159	; 0x9f
 800069e:	dd83      	ble.n	80005a8 <parseGNSS+0x24>
		}
	}
	// parsing
	if (start == INT_MAX - 1){
 80006a0:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 80006a4:	4918      	ldr	r1, [pc, #96]	; (8000708 <parseGNSS+0x184>)
 80006a6:	4411      	add	r1, r2
 80006a8:	430b      	orrs	r3, r1
 80006aa:	d104      	bne.n	80006b6 <parseGNSS+0x132>
		printf("\nparsing failed, start == INT_MAX - 1\r\n");
 80006ac:	4817      	ldr	r0, [pc, #92]	; (800070c <parseGNSS+0x188>)
 80006ae:	f002 fa61 	bl	8002b74 <puts>
		return 10;
 80006b2:	230a      	movs	r3, #10
 80006b4:	e2f2      	b.n	8000c9c <parseGNSS+0x718>
	}
	int64_t pointer = start;
 80006b6:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 80006ba:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	while (input[pointer] != ',' && (pointer < inputSize)) {pointer++;} // skip $GPGGA,
 80006be:	e006      	b.n	80006ce <parseGNSS+0x14a>
 80006c0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80006c4:	1c54      	adds	r4, r2, #1
 80006c6:	f143 0500 	adc.w	r5, r3, #0
 80006ca:	e9c7 4550 	strd	r4, r5, [r7, #320]	; 0x140
 80006ce:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80006d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80006d6:	4413      	add	r3, r2
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b2c      	cmp	r3, #44	; 0x2c
 80006dc:	d005      	beq.n	80006ea <parseGNSS+0x166>
 80006de:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80006e2:	2aa0      	cmp	r2, #160	; 0xa0
 80006e4:	f173 0300 	sbcs.w	r3, r3, #0
 80006e8:	dbea      	blt.n	80006c0 <parseGNSS+0x13c>
	pointer++;
 80006ea:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80006ee:	f112 0801 	adds.w	r8, r2, #1
 80006f2:	f143 0900 	adc.w	r9, r3, #0
 80006f6:	e9c7 8950 	strd	r8, r9, [r7, #320]	; 0x140
	while (input[pointer] != ',' && (pointer < inputSize)) {pointer++;} // skip time,
 80006fa:	e011      	b.n	8000720 <parseGNSS+0x19c>
 80006fc:	7ffffffe 	.word	0x7ffffffe
 8000700:	08003a88 	.word	0x08003a88
 8000704:	08003b2c 	.word	0x08003b2c
 8000708:	80000002 	.word	0x80000002
 800070c:	08003adc 	.word	0x08003adc
 8000710:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000714:	f112 0a01 	adds.w	sl, r2, #1
 8000718:	f143 0b00 	adc.w	fp, r3, #0
 800071c:	e9c7 ab50 	strd	sl, fp, [r7, #320]	; 0x140
 8000720:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8000724:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000728:	4413      	add	r3, r2
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b2c      	cmp	r3, #44	; 0x2c
 800072e:	d005      	beq.n	800073c <parseGNSS+0x1b8>
 8000730:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000734:	2aa0      	cmp	r2, #160	; 0xa0
 8000736:	f173 0300 	sbcs.w	r3, r3, #0
 800073a:	dbe9      	blt.n	8000710 <parseGNSS+0x18c>
	pointer++;
 800073c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000740:	1c51      	adds	r1, r2, #1
 8000742:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8000746:	f143 0300 	adc.w	r3, r3, #0
 800074a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800074e:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8000752:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140

	if (input[pointer] == ',') {} // latitude is missing
 8000756:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800075a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800075e:	4413      	add	r3, r2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b2c      	cmp	r3, #44	; 0x2c
 8000764:	f000 80ab 	beq.w	80008be <parseGNSS+0x33a>
	else { // latitude
		parseResult[13] = input[pointer++]; // this is bad, because no && (pointer < inputSize), but ok
 8000768:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800076c:	1c51      	adds	r1, r2, #1
 800076e:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8000772:	f143 0100 	adc.w	r1, r3, #0
 8000776:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 800077a:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800077e:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140
 8000782:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000786:	4413      	add	r3, r2
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	4ad6      	ldr	r2, [pc, #856]	; (8000ae4 <parseGNSS+0x560>)
 800078c:	7353      	strb	r3, [r2, #13]
		parseResult[14] = input[pointer++];
 800078e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000792:	1c51      	adds	r1, r2, #1
 8000794:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8000798:	f143 0100 	adc.w	r1, r3, #0
 800079c:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 80007a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80007a4:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140
 80007a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80007ac:	4413      	add	r3, r2
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	4acc      	ldr	r2, [pc, #816]	; (8000ae4 <parseGNSS+0x560>)
 80007b2:	7393      	strb	r3, [r2, #14]
		parseResult[16] = input[pointer++];
 80007b4:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80007b8:	1c51      	adds	r1, r2, #1
 80007ba:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80007be:	f143 0100 	adc.w	r1, r3, #0
 80007c2:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 80007c6:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80007ca:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140
 80007ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80007d2:	4413      	add	r3, r2
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	4ac3      	ldr	r2, [pc, #780]	; (8000ae4 <parseGNSS+0x560>)
 80007d8:	7413      	strb	r3, [r2, #16]
		parseResult[17] = input[pointer++];
 80007da:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80007de:	1c51      	adds	r1, r2, #1
 80007e0:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80007e4:	f143 0100 	adc.w	r1, r3, #0
 80007e8:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 80007ec:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80007f0:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140
 80007f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80007f8:	4413      	add	r3, r2
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	4ab9      	ldr	r2, [pc, #740]	; (8000ae4 <parseGNSS+0x560>)
 80007fe:	7453      	strb	r3, [r2, #17]
		parseResult[18] = input[pointer++];
 8000800:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000804:	1c51      	adds	r1, r2, #1
 8000806:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800080a:	f143 0100 	adc.w	r1, r3, #0
 800080e:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8000812:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8000816:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140
 800081a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800081e:	4413      	add	r3, r2
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	4ab0      	ldr	r2, [pc, #704]	; (8000ae4 <parseGNSS+0x560>)
 8000824:	7493      	strb	r3, [r2, #18]
		parseResult[19] = input[pointer++];
 8000826:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800082a:	1c51      	adds	r1, r2, #1
 800082c:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8000830:	f143 0100 	adc.w	r1, r3, #0
 8000834:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8000838:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800083c:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140
 8000840:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000844:	4413      	add	r3, r2
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	4aa6      	ldr	r2, [pc, #664]	; (8000ae4 <parseGNSS+0x560>)
 800084a:	74d3      	strb	r3, [r2, #19]
		parseResult[20] = input[pointer++];
 800084c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000850:	1c51      	adds	r1, r2, #1
 8000852:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8000856:	f143 0100 	adc.w	r1, r3, #0
 800085a:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
 800085e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8000862:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140
 8000866:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800086a:	4413      	add	r3, r2
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	4a9d      	ldr	r2, [pc, #628]	; (8000ae4 <parseGNSS+0x560>)
 8000870:	7513      	strb	r3, [r2, #20]
		parseResult[21] = input[pointer++];
 8000872:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000876:	1c51      	adds	r1, r2, #1
 8000878:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800087c:	f143 0100 	adc.w	r1, r3, #0
 8000880:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 8000884:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8000888:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140
 800088c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000890:	4413      	add	r3, r2
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	4a93      	ldr	r2, [pc, #588]	; (8000ae4 <parseGNSS+0x560>)
 8000896:	7553      	strb	r3, [r2, #21]
		parseResult[22] = input[pointer++];
 8000898:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800089c:	1c51      	adds	r1, r2, #1
 800089e:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 80008a2:	f143 0100 	adc.w	r1, r3, #0
 80008a6:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 80008aa:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80008ae:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140
 80008b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80008b6:	4413      	add	r3, r2
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	4a8a      	ldr	r2, [pc, #552]	; (8000ae4 <parseGNSS+0x560>)
 80008bc:	7593      	strb	r3, [r2, #22]
	}
	pointer++;
 80008be:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80008c2:	1c51      	adds	r1, r2, #1
 80008c4:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80008c8:	f143 0300 	adc.w	r3, r3, #0
 80008cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80008d0:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 80008d4:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
	//printf("%s\n\n", parseResult); //debug
	if (input[pointer] != ',') { // make sure that north/south isn't missing
 80008d8:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80008dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80008e0:	4413      	add	r3, r2
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b2c      	cmp	r3, #44	; 0x2c
 80008e6:	d007      	beq.n	80008f8 <parseGNSS+0x374>
		parseResult[23] = input[pointer];
 80008e8:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80008ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80008f0:	4413      	add	r3, r2
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	4a7b      	ldr	r2, [pc, #492]	; (8000ae4 <parseGNSS+0x560>)
 80008f6:	75d3      	strb	r3, [r2, #23]
	}
	//printf("%s\n\n", parseResult);//debug
	pointer += 2;
 80008f8:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80008fc:	1c91      	adds	r1, r2, #2
 80008fe:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8000902:	f143 0300 	adc.w	r3, r3, #0
 8000906:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800090a:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800090e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140

	if (input[pointer] == ',') {} // longitude is missing
 8000912:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8000916:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800091a:	4413      	add	r3, r2
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b2c      	cmp	r3, #44	; 0x2c
 8000920:	f000 80ba 	beq.w	8000a98 <parseGNSS+0x514>
	else { // latitude
		parseResult[39] = input[pointer++];
 8000924:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000928:	1c51      	adds	r1, r2, #1
 800092a:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 800092e:	f143 0100 	adc.w	r1, r3, #0
 8000932:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8000936:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800093a:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140
 800093e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000942:	4413      	add	r3, r2
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	4a67      	ldr	r2, [pc, #412]	; (8000ae4 <parseGNSS+0x560>)
 8000948:	f882 3027 	strb.w	r3, [r2, #39]	; 0x27
		parseResult[40] = input[pointer++];
 800094c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000950:	1c51      	adds	r1, r2, #1
 8000952:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8000956:	f143 0100 	adc.w	r1, r3, #0
 800095a:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 800095e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8000962:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140
 8000966:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800096a:	4413      	add	r3, r2
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	4a5d      	ldr	r2, [pc, #372]	; (8000ae4 <parseGNSS+0x560>)
 8000970:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
		parseResult[41] = input[pointer++];
 8000974:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000978:	1c51      	adds	r1, r2, #1
 800097a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800097e:	f143 0100 	adc.w	r1, r3, #0
 8000982:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 8000986:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800098a:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140
 800098e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000992:	4413      	add	r3, r2
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	4a53      	ldr	r2, [pc, #332]	; (8000ae4 <parseGNSS+0x560>)
 8000998:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
		parseResult[43] = input[pointer++];
 800099c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80009a0:	1c51      	adds	r1, r2, #1
 80009a2:	67b9      	str	r1, [r7, #120]	; 0x78
 80009a4:	f143 0100 	adc.w	r1, r3, #0
 80009a8:	67f9      	str	r1, [r7, #124]	; 0x7c
 80009aa:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80009ae:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140
 80009b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80009b6:	4413      	add	r3, r2
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	4a4a      	ldr	r2, [pc, #296]	; (8000ae4 <parseGNSS+0x560>)
 80009bc:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
		parseResult[44] = input[pointer++];
 80009c0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80009c4:	1c51      	adds	r1, r2, #1
 80009c6:	6739      	str	r1, [r7, #112]	; 0x70
 80009c8:	f143 0100 	adc.w	r1, r3, #0
 80009cc:	6779      	str	r1, [r7, #116]	; 0x74
 80009ce:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80009d2:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140
 80009d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80009da:	4413      	add	r3, r2
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	4a41      	ldr	r2, [pc, #260]	; (8000ae4 <parseGNSS+0x560>)
 80009e0:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		parseResult[45] = input[pointer++];
 80009e4:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80009e8:	1c51      	adds	r1, r2, #1
 80009ea:	66b9      	str	r1, [r7, #104]	; 0x68
 80009ec:	f143 0100 	adc.w	r1, r3, #0
 80009f0:	66f9      	str	r1, [r7, #108]	; 0x6c
 80009f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80009f6:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140
 80009fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80009fe:	4413      	add	r3, r2
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	4a38      	ldr	r2, [pc, #224]	; (8000ae4 <parseGNSS+0x560>)
 8000a04:	f882 302d 	strb.w	r3, [r2, #45]	; 0x2d
		parseResult[46] = input[pointer++];
 8000a08:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000a0c:	1c51      	adds	r1, r2, #1
 8000a0e:	6639      	str	r1, [r7, #96]	; 0x60
 8000a10:	f143 0100 	adc.w	r1, r3, #0
 8000a14:	6679      	str	r1, [r7, #100]	; 0x64
 8000a16:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8000a1a:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140
 8000a1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000a22:	4413      	add	r3, r2
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	4a2f      	ldr	r2, [pc, #188]	; (8000ae4 <parseGNSS+0x560>)
 8000a28:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
		parseResult[47] = input[pointer++];
 8000a2c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000a30:	1c51      	adds	r1, r2, #1
 8000a32:	65b9      	str	r1, [r7, #88]	; 0x58
 8000a34:	f143 0100 	adc.w	r1, r3, #0
 8000a38:	65f9      	str	r1, [r7, #92]	; 0x5c
 8000a3a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8000a3e:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140
 8000a42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000a46:	4413      	add	r3, r2
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	4a26      	ldr	r2, [pc, #152]	; (8000ae4 <parseGNSS+0x560>)
 8000a4c:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
		parseResult[48] = input[pointer++];
 8000a50:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000a54:	1c51      	adds	r1, r2, #1
 8000a56:	6539      	str	r1, [r7, #80]	; 0x50
 8000a58:	f143 0100 	adc.w	r1, r3, #0
 8000a5c:	6579      	str	r1, [r7, #84]	; 0x54
 8000a5e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000a62:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140
 8000a66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000a6a:	4413      	add	r3, r2
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	4a1d      	ldr	r2, [pc, #116]	; (8000ae4 <parseGNSS+0x560>)
 8000a70:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
		parseResult[49] = input[pointer++];
 8000a74:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000a78:	1c51      	adds	r1, r2, #1
 8000a7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8000a7c:	f143 0100 	adc.w	r1, r3, #0
 8000a80:	64f9      	str	r1, [r7, #76]	; 0x4c
 8000a82:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8000a86:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140
 8000a8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000a8e:	4413      	add	r3, r2
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	4a14      	ldr	r2, [pc, #80]	; (8000ae4 <parseGNSS+0x560>)
 8000a94:	f882 3031 	strb.w	r3, [r2, #49]	; 0x31
	}
	pointer++;
 8000a98:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000a9c:	1c51      	adds	r1, r2, #1
 8000a9e:	6439      	str	r1, [r7, #64]	; 0x40
 8000aa0:	f143 0300 	adc.w	r3, r3, #0
 8000aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8000aa6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8000aaa:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
	if (input[pointer] != ',') { // make sure that hemisphere isn't missing
 8000aae:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8000ab2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000ab6:	4413      	add	r3, r2
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b2c      	cmp	r3, #44	; 0x2c
 8000abc:	d014      	beq.n	8000ae8 <parseGNSS+0x564>
		parseResult[50] = input[pointer++];
 8000abe:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000ac2:	1c51      	adds	r1, r2, #1
 8000ac4:	63b9      	str	r1, [r7, #56]	; 0x38
 8000ac6:	f143 0100 	adc.w	r1, r3, #0
 8000aca:	63f9      	str	r1, [r7, #60]	; 0x3c
 8000acc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8000ad0:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140
 8000ad4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000ad8:	4413      	add	r3, r2
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	4a01      	ldr	r2, [pc, #4]	; (8000ae4 <parseGNSS+0x560>)
 8000ade:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
 8000ae2:	e001      	b.n	8000ae8 <parseGNSS+0x564>
 8000ae4:	20000000 	.word	0x20000000
	}
	pointer++;
 8000ae8:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000aec:	1c51      	adds	r1, r2, #1
 8000aee:	6339      	str	r1, [r7, #48]	; 0x30
 8000af0:	f143 0300 	adc.w	r3, r3, #0
 8000af4:	637b      	str	r3, [r7, #52]	; 0x34
 8000af6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8000afa:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140

	while (input[pointer] != ',' && (pointer < inputSize)) {pointer++;} // skip mode,
 8000afe:	e00a      	b.n	8000b16 <parseGNSS+0x592>
 8000b00:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000b04:	1c51      	adds	r1, r2, #1
 8000b06:	62b9      	str	r1, [r7, #40]	; 0x28
 8000b08:	f143 0300 	adc.w	r3, r3, #0
 8000b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b0e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000b12:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 8000b16:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8000b1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000b1e:	4413      	add	r3, r2
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b2c      	cmp	r3, #44	; 0x2c
 8000b24:	d005      	beq.n	8000b32 <parseGNSS+0x5ae>
 8000b26:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000b2a:	2aa0      	cmp	r2, #160	; 0xa0
 8000b2c:	f173 0300 	sbcs.w	r3, r3, #0
 8000b30:	dbe6      	blt.n	8000b00 <parseGNSS+0x57c>
	pointer++;
 8000b32:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000b36:	1c51      	adds	r1, r2, #1
 8000b38:	6239      	str	r1, [r7, #32]
 8000b3a:	f143 0300 	adc.w	r3, r3, #0
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000b40:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000b44:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
	while (input[pointer] != ',' && (pointer < inputSize)) {pointer++;} // skip number of used sattelites,
 8000b48:	e00a      	b.n	8000b60 <parseGNSS+0x5dc>
 8000b4a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000b4e:	1c51      	adds	r1, r2, #1
 8000b50:	61b9      	str	r1, [r7, #24]
 8000b52:	f143 0300 	adc.w	r3, r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
 8000b58:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000b5c:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 8000b60:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8000b64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000b68:	4413      	add	r3, r2
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b2c      	cmp	r3, #44	; 0x2c
 8000b6e:	d005      	beq.n	8000b7c <parseGNSS+0x5f8>
 8000b70:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000b74:	2aa0      	cmp	r2, #160	; 0xa0
 8000b76:	f173 0300 	sbcs.w	r3, r3, #0
 8000b7a:	dbe6      	blt.n	8000b4a <parseGNSS+0x5c6>
	pointer++;
 8000b7c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000b80:	1c51      	adds	r1, r2, #1
 8000b82:	6139      	str	r1, [r7, #16]
 8000b84:	f143 0300 	adc.w	r3, r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
 8000b8a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000b8e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
	while (input[pointer] != ',' && (pointer < inputSize)) {pointer++;} // skip HDOP, whatever it is
 8000b92:	e00a      	b.n	8000baa <parseGNSS+0x626>
 8000b94:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000b98:	1c51      	adds	r1, r2, #1
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	f143 0300 	adc.w	r3, r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000ba6:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 8000baa:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000bae:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000bb2:	4413      	add	r3, r2
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b2c      	cmp	r3, #44	; 0x2c
 8000bb8:	d005      	beq.n	8000bc6 <parseGNSS+0x642>
 8000bba:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000bbe:	2aa0      	cmp	r2, #160	; 0xa0
 8000bc0:	f173 0300 	sbcs.w	r3, r3, #0
 8000bc4:	dbe6      	blt.n	8000b94 <parseGNSS+0x610>
	pointer++;
 8000bc6:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000bca:	1c51      	adds	r1, r2, #1
 8000bcc:	6039      	str	r1, [r7, #0]
 8000bce:	f143 0300 	adc.w	r3, r3, #0
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000bd8:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
	// height
	for (int i = pointer; ((i - pointer) < 9) && (i < inputSize); i++){ // pointer+1 because I wanna to put ">" in there if there are too many symbols.
 8000bdc:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000be0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8000be4:	e02c      	b.n	8000c40 <parseGNSS+0x6bc>
		if (input[i] == ',') break;
 8000be6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000bea:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000bee:	4413      	add	r3, r2
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b2c      	cmp	r3, #44	; 0x2c
 8000bf4:	d045      	beq.n	8000c82 <parseGNSS+0x6fe>
		parseResult[63 + i - pointer] = input[i];
 8000bf6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000bfa:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000bfe:	18d1      	adds	r1, r2, r3
 8000c00:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000c04:	333f      	adds	r3, #63	; 0x3f
 8000c06:	17da      	asrs	r2, r3, #31
 8000c08:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000c0c:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8000c10:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000c14:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8000c18:	4620      	mov	r0, r4
 8000c1a:	1a80      	subs	r0, r0, r2
 8000c1c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 8000c20:	4628      	mov	r0, r5
 8000c22:	eb60 0303 	sbc.w	r3, r0, r3
 8000c26:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000c2a:	780a      	ldrb	r2, [r1, #0]
 8000c2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <parseGNSS+0x724>)
 8000c2e:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8000c32:	440b      	add	r3, r1
 8000c34:	701a      	strb	r2, [r3, #0]
	for (int i = pointer; ((i - pointer) < 9) && (i < inputSize); i++){ // pointer+1 because I wanna to put ">" in there if there are too many symbols.
 8000c36:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8000c40:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000c44:	17da      	asrs	r2, r3, #31
 8000c46:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000c4a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8000c4e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000c52:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 8000c56:	4621      	mov	r1, r4
 8000c58:	1a89      	subs	r1, r1, r2
 8000c5a:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8000c5e:	4629      	mov	r1, r5
 8000c60:	eb61 0303 	sbc.w	r3, r1, r3
 8000c64:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000c68:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	2b09      	cmp	r3, #9
 8000c70:	4613      	mov	r3, r2
 8000c72:	f173 0300 	sbcs.w	r3, r3, #0
 8000c76:	da05      	bge.n	8000c84 <parseGNSS+0x700>
 8000c78:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000c7c:	2b9f      	cmp	r3, #159	; 0x9f
 8000c7e:	ddb2      	ble.n	8000be6 <parseGNSS+0x662>
 8000c80:	e000      	b.n	8000c84 <parseGNSS+0x700>
		if (input[i] == ',') break;
 8000c82:	bf00      	nop
		//printf(" i is %u input[i] is %c\r\n", i, input[i]); //debug
	}

	if (pointer >= inputSize){
 8000c84:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8000c88:	2aa0      	cmp	r2, #160	; 0xa0
 8000c8a:	f173 0300 	sbcs.w	r3, r3, #0
 8000c8e:	db04      	blt.n	8000c9a <parseGNSS+0x716>
		printf("\nparsing failed, pointer >= inputSize\r\n");
 8000c90:	4806      	ldr	r0, [pc, #24]	; (8000cac <parseGNSS+0x728>)
 8000c92:	f001 ff6f 	bl	8002b74 <puts>
		return 20;
 8000c96:	2314      	movs	r3, #20
 8000c98:	e000      	b.n	8000c9c <parseGNSS+0x718>
	}

	return 0;
 8000c9a:	2300      	movs	r3, #0
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	08003b04 	.word	0x08003b04

08000cb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b0aa      	sub	sp, #168	; 0xa8
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb6:	f000 fae9 	bl	800128c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cba:	f000 f841 	bl	8000d40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cbe:	f000 f8f3 	bl	8000ea8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000cc2:	f000 f89d 	bl	8000e00 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000cc6:	f000 f8c5 	bl	8000e54 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t input[inputSize];
  printf("hello\n\n");
 8000cca:	4818      	ldr	r0, [pc, #96]	; (8000d2c <main+0x7c>)
 8000ccc:	f001 ff52 	bl	8002b74 <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//scanf("%s\n", input);
	HAL_Delay(100); // for some reason gnss sends garbage or useless (for the task) data after startup, so delay.
 8000cd0:	2064      	movs	r0, #100	; 0x64
 8000cd2:	f000 fb4d 	bl	8001370 <HAL_Delay>
	HAL_UART_Receive(&huart2, input, sizeof(input)/sizeof(input[0]), 1000);
 8000cd6:	4639      	mov	r1, r7
 8000cd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cdc:	22a0      	movs	r2, #160	; 0xa0
 8000cde:	4814      	ldr	r0, [pc, #80]	; (8000d30 <main+0x80>)
 8000ce0:	f001 fb0b 	bl	80022fa <HAL_UART_Receive>
	int j = parseGNSS(input);
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fc4c 	bl	8000584 <parseGNSS>
 8000cec:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
	printf("%s\n\n", parseResult);
 8000cf0:	4910      	ldr	r1, [pc, #64]	; (8000d34 <main+0x84>)
 8000cf2:	4811      	ldr	r0, [pc, #68]	; (8000d38 <main+0x88>)
 8000cf4:	f001 feb8 	bl	8002a68 <iprintf>
	for (int i = 0; i < sizeof(permParseResult)/sizeof(permParseResult[0]); i++){
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000cfe:	e00f      	b.n	8000d20 <main+0x70>
		parseResult[i] = permParseResult[i];
 8000d00:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <main+0x8c>)
 8000d02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000d06:	4413      	add	r3, r2
 8000d08:	7819      	ldrb	r1, [r3, #0]
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <main+0x84>)
 8000d0c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000d10:	4413      	add	r3, r2
 8000d12:	460a      	mov	r2, r1
 8000d14:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(permParseResult)/sizeof(permParseResult[0]); i++){
 8000d16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000d20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000d24:	2b4c      	cmp	r3, #76	; 0x4c
 8000d26:	d9eb      	bls.n	8000d00 <main+0x50>
  {
 8000d28:	e7d2      	b.n	8000cd0 <main+0x20>
 8000d2a:	bf00      	nop
 8000d2c:	08003b34 	.word	0x08003b34
 8000d30:	20000170 	.word	0x20000170
 8000d34:	20000000 	.word	0x20000000
 8000d38:	08003b3c 	.word	0x08003b3c
 8000d3c:	20000050 	.word	0x20000050

08000d40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b094      	sub	sp, #80	; 0x50
 8000d44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d46:	f107 0320 	add.w	r3, r7, #32
 8000d4a:	2230      	movs	r2, #48	; 0x30
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f001 fe82 	bl	8002a58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d64:	2300      	movs	r3, #0
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	4b23      	ldr	r3, [pc, #140]	; (8000df8 <SystemClock_Config+0xb8>)
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	4a22      	ldr	r2, [pc, #136]	; (8000df8 <SystemClock_Config+0xb8>)
 8000d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d72:	6413      	str	r3, [r2, #64]	; 0x40
 8000d74:	4b20      	ldr	r3, [pc, #128]	; (8000df8 <SystemClock_Config+0xb8>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d80:	2300      	movs	r3, #0
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	4b1d      	ldr	r3, [pc, #116]	; (8000dfc <SystemClock_Config+0xbc>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d8c:	4a1b      	ldr	r2, [pc, #108]	; (8000dfc <SystemClock_Config+0xbc>)
 8000d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d92:	6013      	str	r3, [r2, #0]
 8000d94:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <SystemClock_Config+0xbc>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000da0:	2302      	movs	r3, #2
 8000da2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da4:	2301      	movs	r3, #1
 8000da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000da8:	2310      	movs	r3, #16
 8000daa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dac:	2300      	movs	r3, #0
 8000dae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db0:	f107 0320 	add.w	r3, r7, #32
 8000db4:	4618      	mov	r0, r3
 8000db6:	f000 fd69 	bl	800188c <HAL_RCC_OscConfig>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000dc0:	f000 f8b0 	bl	8000f24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc4:	230f      	movs	r3, #15
 8000dc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dd8:	f107 030c 	add.w	r3, r7, #12
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 ffcc 	bl	8001d7c <HAL_RCC_ClockConfig>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000dea:	f000 f89b 	bl	8000f24 <Error_Handler>
  }
}
 8000dee:	bf00      	nop
 8000df0:	3750      	adds	r7, #80	; 0x50
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40007000 	.word	0x40007000

08000e00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <MX_USART1_UART_Init+0x4c>)
 8000e06:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <MX_USART1_UART_Init+0x50>)
 8000e08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <MX_USART1_UART_Init+0x4c>)
 8000e0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <MX_USART1_UART_Init+0x4c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <MX_USART1_UART_Init+0x4c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <MX_USART1_UART_Init+0x4c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e24:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <MX_USART1_UART_Init+0x4c>)
 8000e26:	220c      	movs	r2, #12
 8000e28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <MX_USART1_UART_Init+0x4c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <MX_USART1_UART_Init+0x4c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e36:	4805      	ldr	r0, [pc, #20]	; (8000e4c <MX_USART1_UART_Init+0x4c>)
 8000e38:	f001 f980 	bl	800213c <HAL_UART_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e42:	f000 f86f 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	2000012c 	.word	0x2000012c
 8000e50:	40011000 	.word	0x40011000

08000e54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e5a:	4a12      	ldr	r2, [pc, #72]	; (8000ea4 <MX_USART2_UART_Init+0x50>)
 8000e5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e60:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e72:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e78:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7e:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e8c:	f001 f956 	bl	800213c <HAL_UART_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e96:	f000 f845 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000170 	.word	0x20000170
 8000ea4:	40004400 	.word	0x40004400

08000ea8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <MX_GPIO_Init+0x30>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a08      	ldr	r2, [pc, #32]	; (8000ed8 <MX_GPIO_Init+0x30>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <MX_GPIO_Init+0x30>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]

}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40023800 	.word	0x40023800

08000edc <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, &ch, sizeof(ch), 1000);
 8000ee4:	1d39      	adds	r1, r7, #4
 8000ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eea:	2204      	movs	r2, #4
 8000eec:	4803      	ldr	r0, [pc, #12]	; (8000efc <__io_putchar+0x20>)
 8000eee:	f001 f972 	bl	80021d6 <HAL_UART_Transmit>
	return ch;
 8000ef2:	687b      	ldr	r3, [r7, #4]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	2000012c 	.word	0x2000012c

08000f00 <__io_getchar>:

int __io_getchar(void){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
	uint8_t data;
	HAL_UART_Receive(&huart2, &data, sizeof(data), 1000);
 8000f06:	1df9      	adds	r1, r7, #7
 8000f08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	4804      	ldr	r0, [pc, #16]	; (8000f20 <__io_getchar+0x20>)
 8000f10:	f001 f9f3 	bl	80022fa <HAL_UART_Receive>
	return data;
 8000f14:	79fb      	ldrb	r3, [r7, #7]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000170 	.word	0x20000170

08000f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f28:	b672      	cpsid	i
}
 8000f2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <Error_Handler+0x8>
	...

08000f30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <HAL_MspInit+0x4c>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	4a0f      	ldr	r2, [pc, #60]	; (8000f7c <HAL_MspInit+0x4c>)
 8000f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f44:	6453      	str	r3, [r2, #68]	; 0x44
 8000f46:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <HAL_MspInit+0x4c>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	603b      	str	r3, [r7, #0]
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <HAL_MspInit+0x4c>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	4a08      	ldr	r2, [pc, #32]	; (8000f7c <HAL_MspInit+0x4c>)
 8000f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f60:	6413      	str	r3, [r2, #64]	; 0x40
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_MspInit+0x4c>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800

08000f80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08c      	sub	sp, #48	; 0x30
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a32      	ldr	r2, [pc, #200]	; (8001068 <HAL_UART_MspInit+0xe8>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d12d      	bne.n	8000ffe <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61bb      	str	r3, [r7, #24]
 8000fa6:	4b31      	ldr	r3, [pc, #196]	; (800106c <HAL_UART_MspInit+0xec>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	4a30      	ldr	r2, [pc, #192]	; (800106c <HAL_UART_MspInit+0xec>)
 8000fac:	f043 0310 	orr.w	r3, r3, #16
 8000fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb2:	4b2e      	ldr	r3, [pc, #184]	; (800106c <HAL_UART_MspInit+0xec>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	f003 0310 	and.w	r3, r3, #16
 8000fba:	61bb      	str	r3, [r7, #24]
 8000fbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	4b2a      	ldr	r3, [pc, #168]	; (800106c <HAL_UART_MspInit+0xec>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a29      	ldr	r2, [pc, #164]	; (800106c <HAL_UART_MspInit+0xec>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b27      	ldr	r3, [pc, #156]	; (800106c <HAL_UART_MspInit+0xec>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fda:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fec:	2307      	movs	r3, #7
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	481e      	ldr	r0, [pc, #120]	; (8001070 <HAL_UART_MspInit+0xf0>)
 8000ff8:	f000 fac4 	bl	8001584 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ffc:	e030      	b.n	8001060 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a1c      	ldr	r2, [pc, #112]	; (8001074 <HAL_UART_MspInit+0xf4>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d12b      	bne.n	8001060 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001008:	2300      	movs	r3, #0
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	4b17      	ldr	r3, [pc, #92]	; (800106c <HAL_UART_MspInit+0xec>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	4a16      	ldr	r2, [pc, #88]	; (800106c <HAL_UART_MspInit+0xec>)
 8001012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001016:	6413      	str	r3, [r2, #64]	; 0x40
 8001018:	4b14      	ldr	r3, [pc, #80]	; (800106c <HAL_UART_MspInit+0xec>)
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	4b10      	ldr	r3, [pc, #64]	; (800106c <HAL_UART_MspInit+0xec>)
 800102a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102c:	4a0f      	ldr	r2, [pc, #60]	; (800106c <HAL_UART_MspInit+0xec>)
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	6313      	str	r3, [r2, #48]	; 0x30
 8001034:	4b0d      	ldr	r3, [pc, #52]	; (800106c <HAL_UART_MspInit+0xec>)
 8001036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001040:	230c      	movs	r3, #12
 8001042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104c:	2303      	movs	r3, #3
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001050:	2307      	movs	r3, #7
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001054:	f107 031c 	add.w	r3, r7, #28
 8001058:	4619      	mov	r1, r3
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <HAL_UART_MspInit+0xf0>)
 800105c:	f000 fa92 	bl	8001584 <HAL_GPIO_Init>
}
 8001060:	bf00      	nop
 8001062:	3730      	adds	r7, #48	; 0x30
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40011000 	.word	0x40011000
 800106c:	40023800 	.word	0x40023800
 8001070:	40020000 	.word	0x40020000
 8001074:	40004400 	.word	0x40004400

08001078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800107c:	e7fe      	b.n	800107c <NMI_Handler+0x4>

0800107e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <HardFault_Handler+0x4>

08001084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <MemManage_Handler+0x4>

0800108a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108e:	e7fe      	b.n	800108e <BusFault_Handler+0x4>

08001090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <UsageFault_Handler+0x4>

08001096 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c4:	f000 f934 	bl	8001330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}

080010cc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	e00a      	b.n	80010f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010de:	f7ff ff0f 	bl	8000f00 <__io_getchar>
 80010e2:	4601      	mov	r1, r0
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	60ba      	str	r2, [r7, #8]
 80010ea:	b2ca      	uxtb	r2, r1
 80010ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	3301      	adds	r3, #1
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	dbf0      	blt.n	80010de <_read+0x12>
	}

return len;
 80010fc:	687b      	ldr	r3, [r7, #4]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b086      	sub	sp, #24
 800110a:	af00      	add	r7, sp, #0
 800110c:	60f8      	str	r0, [r7, #12]
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	e009      	b.n	800112c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	1c5a      	adds	r2, r3, #1
 800111c:	60ba      	str	r2, [r7, #8]
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fedb 	bl	8000edc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	3301      	adds	r3, #1
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	697a      	ldr	r2, [r7, #20]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	429a      	cmp	r2, r3
 8001132:	dbf1      	blt.n	8001118 <_write+0x12>
	}
	return len;
 8001134:	687b      	ldr	r3, [r7, #4]
}
 8001136:	4618      	mov	r0, r3
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <_close>:

int _close(int file)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
	return -1;
 8001146:	f04f 33ff 	mov.w	r3, #4294967295
}
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001166:	605a      	str	r2, [r3, #4]
	return 0;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <_isatty>:

int _isatty(int file)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
	return 1;
 800117e:	2301      	movs	r3, #1
}
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
	return 0;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b0:	4a14      	ldr	r2, [pc, #80]	; (8001204 <_sbrk+0x5c>)
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <_sbrk+0x60>)
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011bc:	4b13      	ldr	r3, [pc, #76]	; (800120c <_sbrk+0x64>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d102      	bne.n	80011ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <_sbrk+0x64>)
 80011c6:	4a12      	ldr	r2, [pc, #72]	; (8001210 <_sbrk+0x68>)
 80011c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <_sbrk+0x64>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d207      	bcs.n	80011e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d8:	f001 fc14 	bl	8002a04 <__errno>
 80011dc:	4603      	mov	r3, r0
 80011de:	220c      	movs	r2, #12
 80011e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295
 80011e6:	e009      	b.n	80011fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <_sbrk+0x64>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ee:	4b07      	ldr	r3, [pc, #28]	; (800120c <_sbrk+0x64>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	4a05      	ldr	r2, [pc, #20]	; (800120c <_sbrk+0x64>)
 80011f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011fa:	68fb      	ldr	r3, [r7, #12]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20010000 	.word	0x20010000
 8001208:	00000400 	.word	0x00000400
 800120c:	200001b4 	.word	0x200001b4
 8001210:	200001d0 	.word	0x200001d0

08001214 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <SystemInit+0x20>)
 800121a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800121e:	4a05      	ldr	r2, [pc, #20]	; (8001234 <SystemInit+0x20>)
 8001220:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001224:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001238:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001270 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800123c:	480d      	ldr	r0, [pc, #52]	; (8001274 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800123e:	490e      	ldr	r1, [pc, #56]	; (8001278 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001240:	4a0e      	ldr	r2, [pc, #56]	; (800127c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001244:	e002      	b.n	800124c <LoopCopyDataInit>

08001246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124a:	3304      	adds	r3, #4

0800124c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800124c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800124e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001250:	d3f9      	bcc.n	8001246 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001252:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001254:	4c0b      	ldr	r4, [pc, #44]	; (8001284 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001258:	e001      	b.n	800125e <LoopFillZerobss>

0800125a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800125c:	3204      	adds	r2, #4

0800125e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800125e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001260:	d3fb      	bcc.n	800125a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001262:	f7ff ffd7 	bl	8001214 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001266:	f001 fbd3 	bl	8002a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800126a:	f7ff fd21 	bl	8000cb0 <main>
  bx  lr    
 800126e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001270:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001278:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 800127c:	08003c04 	.word	0x08003c04
  ldr r2, =_sbss
 8001280:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8001284:	200001cc 	.word	0x200001cc

08001288 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001288:	e7fe      	b.n	8001288 <ADC_IRQHandler>
	...

0800128c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001290:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <HAL_Init+0x40>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a0d      	ldr	r2, [pc, #52]	; (80012cc <HAL_Init+0x40>)
 8001296:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800129a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800129c:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <HAL_Init+0x40>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <HAL_Init+0x40>)
 80012a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <HAL_Init+0x40>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a07      	ldr	r2, [pc, #28]	; (80012cc <HAL_Init+0x40>)
 80012ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b4:	2003      	movs	r0, #3
 80012b6:	f000 f931 	bl	800151c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ba:	200f      	movs	r0, #15
 80012bc:	f000 f808 	bl	80012d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012c0:	f7ff fe36 	bl	8000f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40023c00 	.word	0x40023c00

080012d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <HAL_InitTick+0x54>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <HAL_InitTick+0x58>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4619      	mov	r1, r3
 80012e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 f93b 	bl	800156a <HAL_SYSTICK_Config>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00e      	b.n	800131c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b0f      	cmp	r3, #15
 8001302:	d80a      	bhi.n	800131a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001304:	2200      	movs	r2, #0
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	f04f 30ff 	mov.w	r0, #4294967295
 800130c:	f000 f911 	bl	8001532 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001310:	4a06      	ldr	r2, [pc, #24]	; (800132c <HAL_InitTick+0x5c>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	e000      	b.n	800131c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
}
 800131c:	4618      	mov	r0, r3
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	200000a0 	.word	0x200000a0
 8001328:	200000a8 	.word	0x200000a8
 800132c:	200000a4 	.word	0x200000a4

08001330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_IncTick+0x20>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_IncTick+0x24>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4413      	add	r3, r2
 8001340:	4a04      	ldr	r2, [pc, #16]	; (8001354 <HAL_IncTick+0x24>)
 8001342:	6013      	str	r3, [r2, #0]
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	200000a8 	.word	0x200000a8
 8001354:	200001b8 	.word	0x200001b8

08001358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return uwTick;
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <HAL_GetTick+0x14>)
 800135e:	681b      	ldr	r3, [r3, #0]
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	200001b8 	.word	0x200001b8

08001370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001378:	f7ff ffee 	bl	8001358 <HAL_GetTick>
 800137c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001388:	d005      	beq.n	8001396 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <HAL_Delay+0x44>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	461a      	mov	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4413      	add	r3, r2
 8001394:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001396:	bf00      	nop
 8001398:	f7ff ffde 	bl	8001358 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d8f7      	bhi.n	8001398 <HAL_Delay+0x28>
  {
  }
}
 80013a8:	bf00      	nop
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200000a8 	.word	0x200000a8

080013b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c8:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <__NVIC_SetPriorityGrouping+0x44>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013d4:	4013      	ands	r3, r2
 80013d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ea:	4a04      	ldr	r2, [pc, #16]	; (80013fc <__NVIC_SetPriorityGrouping+0x44>)
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	60d3      	str	r3, [r2, #12]
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <__NVIC_GetPriorityGrouping+0x18>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	0a1b      	lsrs	r3, r3, #8
 800140a:	f003 0307 	and.w	r3, r3, #7
}
 800140e:	4618      	mov	r0, r3
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	6039      	str	r1, [r7, #0]
 8001426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142c:	2b00      	cmp	r3, #0
 800142e:	db0a      	blt.n	8001446 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	b2da      	uxtb	r2, r3
 8001434:	490c      	ldr	r1, [pc, #48]	; (8001468 <__NVIC_SetPriority+0x4c>)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	0112      	lsls	r2, r2, #4
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	440b      	add	r3, r1
 8001440:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001444:	e00a      	b.n	800145c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4908      	ldr	r1, [pc, #32]	; (800146c <__NVIC_SetPriority+0x50>)
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	f003 030f 	and.w	r3, r3, #15
 8001452:	3b04      	subs	r3, #4
 8001454:	0112      	lsls	r2, r2, #4
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	440b      	add	r3, r1
 800145a:	761a      	strb	r2, [r3, #24]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000e100 	.word	0xe000e100
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001470:	b480      	push	{r7}
 8001472:	b089      	sub	sp, #36	; 0x24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f1c3 0307 	rsb	r3, r3, #7
 800148a:	2b04      	cmp	r3, #4
 800148c:	bf28      	it	cs
 800148e:	2304      	movcs	r3, #4
 8001490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3304      	adds	r3, #4
 8001496:	2b06      	cmp	r3, #6
 8001498:	d902      	bls.n	80014a0 <NVIC_EncodePriority+0x30>
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3b03      	subs	r3, #3
 800149e:	e000      	b.n	80014a2 <NVIC_EncodePriority+0x32>
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a4:	f04f 32ff 	mov.w	r2, #4294967295
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43da      	mvns	r2, r3
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	401a      	ands	r2, r3
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b8:	f04f 31ff 	mov.w	r1, #4294967295
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	fa01 f303 	lsl.w	r3, r1, r3
 80014c2:	43d9      	mvns	r1, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	4313      	orrs	r3, r2
         );
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3724      	adds	r7, #36	; 0x24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014e8:	d301      	bcc.n	80014ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ea:	2301      	movs	r3, #1
 80014ec:	e00f      	b.n	800150e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ee:	4a0a      	ldr	r2, [pc, #40]	; (8001518 <SysTick_Config+0x40>)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014f6:	210f      	movs	r1, #15
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295
 80014fc:	f7ff ff8e 	bl	800141c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <SysTick_Config+0x40>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001506:	4b04      	ldr	r3, [pc, #16]	; (8001518 <SysTick_Config+0x40>)
 8001508:	2207      	movs	r2, #7
 800150a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	e000e010 	.word	0xe000e010

0800151c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff ff47 	bl	80013b8 <__NVIC_SetPriorityGrouping>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001532:	b580      	push	{r7, lr}
 8001534:	b086      	sub	sp, #24
 8001536:	af00      	add	r7, sp, #0
 8001538:	4603      	mov	r3, r0
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
 800153e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001544:	f7ff ff5c 	bl	8001400 <__NVIC_GetPriorityGrouping>
 8001548:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	6978      	ldr	r0, [r7, #20]
 8001550:	f7ff ff8e 	bl	8001470 <NVIC_EncodePriority>
 8001554:	4602      	mov	r2, r0
 8001556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155a:	4611      	mov	r1, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff5d 	bl	800141c <__NVIC_SetPriority>
}
 8001562:	bf00      	nop
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff ffb0 	bl	80014d8 <SysTick_Config>
 8001578:	4603      	mov	r3, r0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001584:	b480      	push	{r7}
 8001586:	b089      	sub	sp, #36	; 0x24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
 800159e:	e159      	b.n	8001854 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015a0:	2201      	movs	r2, #1
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	4013      	ands	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	f040 8148 	bne.w	800184e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d005      	beq.n	80015d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d130      	bne.n	8001638 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	2203      	movs	r2, #3
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	68da      	ldr	r2, [r3, #12]
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800160c:	2201      	movs	r2, #1
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	091b      	lsrs	r3, r3, #4
 8001622:	f003 0201 	and.w	r2, r3, #1
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	2b03      	cmp	r3, #3
 8001642:	d017      	beq.n	8001674 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	2203      	movs	r2, #3
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d123      	bne.n	80016c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	08da      	lsrs	r2, r3, #3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3208      	adds	r2, #8
 8001688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800168c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	220f      	movs	r2, #15
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	691a      	ldr	r2, [r3, #16]
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	08da      	lsrs	r2, r3, #3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3208      	adds	r2, #8
 80016c2:	69b9      	ldr	r1, [r7, #24]
 80016c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	2203      	movs	r2, #3
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 0203 	and.w	r2, r3, #3
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001704:	2b00      	cmp	r3, #0
 8001706:	f000 80a2 	beq.w	800184e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	4b57      	ldr	r3, [pc, #348]	; (800186c <HAL_GPIO_Init+0x2e8>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	4a56      	ldr	r2, [pc, #344]	; (800186c <HAL_GPIO_Init+0x2e8>)
 8001714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001718:	6453      	str	r3, [r2, #68]	; 0x44
 800171a:	4b54      	ldr	r3, [pc, #336]	; (800186c <HAL_GPIO_Init+0x2e8>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001726:	4a52      	ldr	r2, [pc, #328]	; (8001870 <HAL_GPIO_Init+0x2ec>)
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	089b      	lsrs	r3, r3, #2
 800172c:	3302      	adds	r3, #2
 800172e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f003 0303 	and.w	r3, r3, #3
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	220f      	movs	r2, #15
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4013      	ands	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a49      	ldr	r2, [pc, #292]	; (8001874 <HAL_GPIO_Init+0x2f0>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d019      	beq.n	8001786 <HAL_GPIO_Init+0x202>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a48      	ldr	r2, [pc, #288]	; (8001878 <HAL_GPIO_Init+0x2f4>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d013      	beq.n	8001782 <HAL_GPIO_Init+0x1fe>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a47      	ldr	r2, [pc, #284]	; (800187c <HAL_GPIO_Init+0x2f8>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d00d      	beq.n	800177e <HAL_GPIO_Init+0x1fa>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a46      	ldr	r2, [pc, #280]	; (8001880 <HAL_GPIO_Init+0x2fc>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d007      	beq.n	800177a <HAL_GPIO_Init+0x1f6>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a45      	ldr	r2, [pc, #276]	; (8001884 <HAL_GPIO_Init+0x300>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d101      	bne.n	8001776 <HAL_GPIO_Init+0x1f2>
 8001772:	2304      	movs	r3, #4
 8001774:	e008      	b.n	8001788 <HAL_GPIO_Init+0x204>
 8001776:	2307      	movs	r3, #7
 8001778:	e006      	b.n	8001788 <HAL_GPIO_Init+0x204>
 800177a:	2303      	movs	r3, #3
 800177c:	e004      	b.n	8001788 <HAL_GPIO_Init+0x204>
 800177e:	2302      	movs	r3, #2
 8001780:	e002      	b.n	8001788 <HAL_GPIO_Init+0x204>
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <HAL_GPIO_Init+0x204>
 8001786:	2300      	movs	r3, #0
 8001788:	69fa      	ldr	r2, [r7, #28]
 800178a:	f002 0203 	and.w	r2, r2, #3
 800178e:	0092      	lsls	r2, r2, #2
 8001790:	4093      	lsls	r3, r2
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001798:	4935      	ldr	r1, [pc, #212]	; (8001870 <HAL_GPIO_Init+0x2ec>)
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	089b      	lsrs	r3, r3, #2
 800179e:	3302      	adds	r3, #2
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017a6:	4b38      	ldr	r3, [pc, #224]	; (8001888 <HAL_GPIO_Init+0x304>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	43db      	mvns	r3, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4013      	ands	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ca:	4a2f      	ldr	r2, [pc, #188]	; (8001888 <HAL_GPIO_Init+0x304>)
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017d0:	4b2d      	ldr	r3, [pc, #180]	; (8001888 <HAL_GPIO_Init+0x304>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017f4:	4a24      	ldr	r2, [pc, #144]	; (8001888 <HAL_GPIO_Init+0x304>)
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017fa:	4b23      	ldr	r3, [pc, #140]	; (8001888 <HAL_GPIO_Init+0x304>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	43db      	mvns	r3, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4013      	ands	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800181e:	4a1a      	ldr	r2, [pc, #104]	; (8001888 <HAL_GPIO_Init+0x304>)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001824:	4b18      	ldr	r3, [pc, #96]	; (8001888 <HAL_GPIO_Init+0x304>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001848:	4a0f      	ldr	r2, [pc, #60]	; (8001888 <HAL_GPIO_Init+0x304>)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3301      	adds	r3, #1
 8001852:	61fb      	str	r3, [r7, #28]
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	2b0f      	cmp	r3, #15
 8001858:	f67f aea2 	bls.w	80015a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800185c:	bf00      	nop
 800185e:	bf00      	nop
 8001860:	3724      	adds	r7, #36	; 0x24
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40023800 	.word	0x40023800
 8001870:	40013800 	.word	0x40013800
 8001874:	40020000 	.word	0x40020000
 8001878:	40020400 	.word	0x40020400
 800187c:	40020800 	.word	0x40020800
 8001880:	40020c00 	.word	0x40020c00
 8001884:	40021000 	.word	0x40021000
 8001888:	40013c00 	.word	0x40013c00

0800188c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e267      	b.n	8001d6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d075      	beq.n	8001996 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018aa:	4b88      	ldr	r3, [pc, #544]	; (8001acc <HAL_RCC_OscConfig+0x240>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 030c 	and.w	r3, r3, #12
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	d00c      	beq.n	80018d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018b6:	4b85      	ldr	r3, [pc, #532]	; (8001acc <HAL_RCC_OscConfig+0x240>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018be:	2b08      	cmp	r3, #8
 80018c0:	d112      	bne.n	80018e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018c2:	4b82      	ldr	r3, [pc, #520]	; (8001acc <HAL_RCC_OscConfig+0x240>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018ce:	d10b      	bne.n	80018e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d0:	4b7e      	ldr	r3, [pc, #504]	; (8001acc <HAL_RCC_OscConfig+0x240>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d05b      	beq.n	8001994 <HAL_RCC_OscConfig+0x108>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d157      	bne.n	8001994 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e242      	b.n	8001d6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f0:	d106      	bne.n	8001900 <HAL_RCC_OscConfig+0x74>
 80018f2:	4b76      	ldr	r3, [pc, #472]	; (8001acc <HAL_RCC_OscConfig+0x240>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a75      	ldr	r2, [pc, #468]	; (8001acc <HAL_RCC_OscConfig+0x240>)
 80018f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	e01d      	b.n	800193c <HAL_RCC_OscConfig+0xb0>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001908:	d10c      	bne.n	8001924 <HAL_RCC_OscConfig+0x98>
 800190a:	4b70      	ldr	r3, [pc, #448]	; (8001acc <HAL_RCC_OscConfig+0x240>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a6f      	ldr	r2, [pc, #444]	; (8001acc <HAL_RCC_OscConfig+0x240>)
 8001910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	4b6d      	ldr	r3, [pc, #436]	; (8001acc <HAL_RCC_OscConfig+0x240>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a6c      	ldr	r2, [pc, #432]	; (8001acc <HAL_RCC_OscConfig+0x240>)
 800191c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	e00b      	b.n	800193c <HAL_RCC_OscConfig+0xb0>
 8001924:	4b69      	ldr	r3, [pc, #420]	; (8001acc <HAL_RCC_OscConfig+0x240>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a68      	ldr	r2, [pc, #416]	; (8001acc <HAL_RCC_OscConfig+0x240>)
 800192a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	4b66      	ldr	r3, [pc, #408]	; (8001acc <HAL_RCC_OscConfig+0x240>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a65      	ldr	r2, [pc, #404]	; (8001acc <HAL_RCC_OscConfig+0x240>)
 8001936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800193a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d013      	beq.n	800196c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff fd08 	bl	8001358 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800194c:	f7ff fd04 	bl	8001358 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b64      	cmp	r3, #100	; 0x64
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e207      	b.n	8001d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195e:	4b5b      	ldr	r3, [pc, #364]	; (8001acc <HAL_RCC_OscConfig+0x240>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0xc0>
 800196a:	e014      	b.n	8001996 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196c:	f7ff fcf4 	bl	8001358 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001974:	f7ff fcf0 	bl	8001358 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b64      	cmp	r3, #100	; 0x64
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e1f3      	b.n	8001d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001986:	4b51      	ldr	r3, [pc, #324]	; (8001acc <HAL_RCC_OscConfig+0x240>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f0      	bne.n	8001974 <HAL_RCC_OscConfig+0xe8>
 8001992:	e000      	b.n	8001996 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d063      	beq.n	8001a6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019a2:	4b4a      	ldr	r3, [pc, #296]	; (8001acc <HAL_RCC_OscConfig+0x240>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 030c 	and.w	r3, r3, #12
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00b      	beq.n	80019c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ae:	4b47      	ldr	r3, [pc, #284]	; (8001acc <HAL_RCC_OscConfig+0x240>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019b6:	2b08      	cmp	r3, #8
 80019b8:	d11c      	bne.n	80019f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ba:	4b44      	ldr	r3, [pc, #272]	; (8001acc <HAL_RCC_OscConfig+0x240>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d116      	bne.n	80019f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c6:	4b41      	ldr	r3, [pc, #260]	; (8001acc <HAL_RCC_OscConfig+0x240>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d005      	beq.n	80019de <HAL_RCC_OscConfig+0x152>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d001      	beq.n	80019de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e1c7      	b.n	8001d6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019de:	4b3b      	ldr	r3, [pc, #236]	; (8001acc <HAL_RCC_OscConfig+0x240>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	4937      	ldr	r1, [pc, #220]	; (8001acc <HAL_RCC_OscConfig+0x240>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f2:	e03a      	b.n	8001a6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d020      	beq.n	8001a3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019fc:	4b34      	ldr	r3, [pc, #208]	; (8001ad0 <HAL_RCC_OscConfig+0x244>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a02:	f7ff fca9 	bl	8001358 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a0a:	f7ff fca5 	bl	8001358 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e1a8      	b.n	8001d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1c:	4b2b      	ldr	r3, [pc, #172]	; (8001acc <HAL_RCC_OscConfig+0x240>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0f0      	beq.n	8001a0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a28:	4b28      	ldr	r3, [pc, #160]	; (8001acc <HAL_RCC_OscConfig+0x240>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	4925      	ldr	r1, [pc, #148]	; (8001acc <HAL_RCC_OscConfig+0x240>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	600b      	str	r3, [r1, #0]
 8001a3c:	e015      	b.n	8001a6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a3e:	4b24      	ldr	r3, [pc, #144]	; (8001ad0 <HAL_RCC_OscConfig+0x244>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a44:	f7ff fc88 	bl	8001358 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a4c:	f7ff fc84 	bl	8001358 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e187      	b.n	8001d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5e:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <HAL_RCC_OscConfig+0x240>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1f0      	bne.n	8001a4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d036      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d016      	beq.n	8001aac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <HAL_RCC_OscConfig+0x248>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a84:	f7ff fc68 	bl	8001358 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a8c:	f7ff fc64 	bl	8001358 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e167      	b.n	8001d6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <HAL_RCC_OscConfig+0x240>)
 8001aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0f0      	beq.n	8001a8c <HAL_RCC_OscConfig+0x200>
 8001aaa:	e01b      	b.n	8001ae4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aac:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <HAL_RCC_OscConfig+0x248>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab2:	f7ff fc51 	bl	8001358 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab8:	e00e      	b.n	8001ad8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aba:	f7ff fc4d 	bl	8001358 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d907      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e150      	b.n	8001d6e <HAL_RCC_OscConfig+0x4e2>
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	42470000 	.word	0x42470000
 8001ad4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad8:	4b88      	ldr	r3, [pc, #544]	; (8001cfc <HAL_RCC_OscConfig+0x470>)
 8001ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1ea      	bne.n	8001aba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 8097 	beq.w	8001c20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001af2:	2300      	movs	r3, #0
 8001af4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001af6:	4b81      	ldr	r3, [pc, #516]	; (8001cfc <HAL_RCC_OscConfig+0x470>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10f      	bne.n	8001b22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	4b7d      	ldr	r3, [pc, #500]	; (8001cfc <HAL_RCC_OscConfig+0x470>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	4a7c      	ldr	r2, [pc, #496]	; (8001cfc <HAL_RCC_OscConfig+0x470>)
 8001b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b10:	6413      	str	r3, [r2, #64]	; 0x40
 8001b12:	4b7a      	ldr	r3, [pc, #488]	; (8001cfc <HAL_RCC_OscConfig+0x470>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b22:	4b77      	ldr	r3, [pc, #476]	; (8001d00 <HAL_RCC_OscConfig+0x474>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d118      	bne.n	8001b60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b2e:	4b74      	ldr	r3, [pc, #464]	; (8001d00 <HAL_RCC_OscConfig+0x474>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a73      	ldr	r2, [pc, #460]	; (8001d00 <HAL_RCC_OscConfig+0x474>)
 8001b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b3a:	f7ff fc0d 	bl	8001358 <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b42:	f7ff fc09 	bl	8001358 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e10c      	b.n	8001d6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b54:	4b6a      	ldr	r3, [pc, #424]	; (8001d00 <HAL_RCC_OscConfig+0x474>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0f0      	beq.n	8001b42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d106      	bne.n	8001b76 <HAL_RCC_OscConfig+0x2ea>
 8001b68:	4b64      	ldr	r3, [pc, #400]	; (8001cfc <HAL_RCC_OscConfig+0x470>)
 8001b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6c:	4a63      	ldr	r2, [pc, #396]	; (8001cfc <HAL_RCC_OscConfig+0x470>)
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	6713      	str	r3, [r2, #112]	; 0x70
 8001b74:	e01c      	b.n	8001bb0 <HAL_RCC_OscConfig+0x324>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2b05      	cmp	r3, #5
 8001b7c:	d10c      	bne.n	8001b98 <HAL_RCC_OscConfig+0x30c>
 8001b7e:	4b5f      	ldr	r3, [pc, #380]	; (8001cfc <HAL_RCC_OscConfig+0x470>)
 8001b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b82:	4a5e      	ldr	r2, [pc, #376]	; (8001cfc <HAL_RCC_OscConfig+0x470>)
 8001b84:	f043 0304 	orr.w	r3, r3, #4
 8001b88:	6713      	str	r3, [r2, #112]	; 0x70
 8001b8a:	4b5c      	ldr	r3, [pc, #368]	; (8001cfc <HAL_RCC_OscConfig+0x470>)
 8001b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8e:	4a5b      	ldr	r2, [pc, #364]	; (8001cfc <HAL_RCC_OscConfig+0x470>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6713      	str	r3, [r2, #112]	; 0x70
 8001b96:	e00b      	b.n	8001bb0 <HAL_RCC_OscConfig+0x324>
 8001b98:	4b58      	ldr	r3, [pc, #352]	; (8001cfc <HAL_RCC_OscConfig+0x470>)
 8001b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9c:	4a57      	ldr	r2, [pc, #348]	; (8001cfc <HAL_RCC_OscConfig+0x470>)
 8001b9e:	f023 0301 	bic.w	r3, r3, #1
 8001ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba4:	4b55      	ldr	r3, [pc, #340]	; (8001cfc <HAL_RCC_OscConfig+0x470>)
 8001ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba8:	4a54      	ldr	r2, [pc, #336]	; (8001cfc <HAL_RCC_OscConfig+0x470>)
 8001baa:	f023 0304 	bic.w	r3, r3, #4
 8001bae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d015      	beq.n	8001be4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb8:	f7ff fbce 	bl	8001358 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bbe:	e00a      	b.n	8001bd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc0:	f7ff fbca 	bl	8001358 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e0cb      	b.n	8001d6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd6:	4b49      	ldr	r3, [pc, #292]	; (8001cfc <HAL_RCC_OscConfig+0x470>)
 8001bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0ee      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x334>
 8001be2:	e014      	b.n	8001c0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be4:	f7ff fbb8 	bl	8001358 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bea:	e00a      	b.n	8001c02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bec:	f7ff fbb4 	bl	8001358 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e0b5      	b.n	8001d6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c02:	4b3e      	ldr	r3, [pc, #248]	; (8001cfc <HAL_RCC_OscConfig+0x470>)
 8001c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1ee      	bne.n	8001bec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c0e:	7dfb      	ldrb	r3, [r7, #23]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d105      	bne.n	8001c20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c14:	4b39      	ldr	r3, [pc, #228]	; (8001cfc <HAL_RCC_OscConfig+0x470>)
 8001c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c18:	4a38      	ldr	r2, [pc, #224]	; (8001cfc <HAL_RCC_OscConfig+0x470>)
 8001c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 80a1 	beq.w	8001d6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c2a:	4b34      	ldr	r3, [pc, #208]	; (8001cfc <HAL_RCC_OscConfig+0x470>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	d05c      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d141      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3e:	4b31      	ldr	r3, [pc, #196]	; (8001d04 <HAL_RCC_OscConfig+0x478>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c44:	f7ff fb88 	bl	8001358 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c4c:	f7ff fb84 	bl	8001358 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e087      	b.n	8001d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c5e:	4b27      	ldr	r3, [pc, #156]	; (8001cfc <HAL_RCC_OscConfig+0x470>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f0      	bne.n	8001c4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69da      	ldr	r2, [r3, #28]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	019b      	lsls	r3, r3, #6
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c80:	085b      	lsrs	r3, r3, #1
 8001c82:	3b01      	subs	r3, #1
 8001c84:	041b      	lsls	r3, r3, #16
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8c:	061b      	lsls	r3, r3, #24
 8001c8e:	491b      	ldr	r1, [pc, #108]	; (8001cfc <HAL_RCC_OscConfig+0x470>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c94:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <HAL_RCC_OscConfig+0x478>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9a:	f7ff fb5d 	bl	8001358 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca2:	f7ff fb59 	bl	8001358 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e05c      	b.n	8001d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb4:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <HAL_RCC_OscConfig+0x470>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0f0      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x416>
 8001cc0:	e054      	b.n	8001d6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc2:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <HAL_RCC_OscConfig+0x478>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc8:	f7ff fb46 	bl	8001358 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd0:	f7ff fb42 	bl	8001358 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e045      	b.n	8001d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_RCC_OscConfig+0x470>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x444>
 8001cee:	e03d      	b.n	8001d6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d107      	bne.n	8001d08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e038      	b.n	8001d6e <HAL_RCC_OscConfig+0x4e2>
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40007000 	.word	0x40007000
 8001d04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d08:	4b1b      	ldr	r3, [pc, #108]	; (8001d78 <HAL_RCC_OscConfig+0x4ec>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d028      	beq.n	8001d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d121      	bne.n	8001d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d11a      	bne.n	8001d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d38:	4013      	ands	r3, r2
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d111      	bne.n	8001d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4e:	085b      	lsrs	r3, r3, #1
 8001d50:	3b01      	subs	r3, #1
 8001d52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d107      	bne.n	8001d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d001      	beq.n	8001d6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e000      	b.n	8001d6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40023800 	.word	0x40023800

08001d7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e0cc      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d90:	4b68      	ldr	r3, [pc, #416]	; (8001f34 <HAL_RCC_ClockConfig+0x1b8>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d90c      	bls.n	8001db8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9e:	4b65      	ldr	r3, [pc, #404]	; (8001f34 <HAL_RCC_ClockConfig+0x1b8>)
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da6:	4b63      	ldr	r3, [pc, #396]	; (8001f34 <HAL_RCC_ClockConfig+0x1b8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d001      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e0b8      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d020      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dd0:	4b59      	ldr	r3, [pc, #356]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	4a58      	ldr	r2, [pc, #352]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d005      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001de8:	4b53      	ldr	r3, [pc, #332]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	4a52      	ldr	r2, [pc, #328]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001dee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001df2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df4:	4b50      	ldr	r3, [pc, #320]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	494d      	ldr	r1, [pc, #308]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d044      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d107      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1a:	4b47      	ldr	r3, [pc, #284]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d119      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e07f      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d003      	beq.n	8001e3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	d107      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e3a:	4b3f      	ldr	r3, [pc, #252]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d109      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e06f      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4a:	4b3b      	ldr	r3, [pc, #236]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e067      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e5a:	4b37      	ldr	r3, [pc, #220]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f023 0203 	bic.w	r2, r3, #3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	4934      	ldr	r1, [pc, #208]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e6c:	f7ff fa74 	bl	8001358 <HAL_GetTick>
 8001e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e72:	e00a      	b.n	8001e8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e74:	f7ff fa70 	bl	8001358 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e04f      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8a:	4b2b      	ldr	r3, [pc, #172]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 020c 	and.w	r2, r3, #12
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d1eb      	bne.n	8001e74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e9c:	4b25      	ldr	r3, [pc, #148]	; (8001f34 <HAL_RCC_ClockConfig+0x1b8>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d20c      	bcs.n	8001ec4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eaa:	4b22      	ldr	r3, [pc, #136]	; (8001f34 <HAL_RCC_ClockConfig+0x1b8>)
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb2:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d001      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e032      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d008      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed0:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	4916      	ldr	r1, [pc, #88]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d009      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eee:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	490e      	ldr	r1, [pc, #56]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f02:	f000 f821 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 8001f06:	4602      	mov	r2, r0
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	490a      	ldr	r1, [pc, #40]	; (8001f3c <HAL_RCC_ClockConfig+0x1c0>)
 8001f14:	5ccb      	ldrb	r3, [r1, r3]
 8001f16:	fa22 f303 	lsr.w	r3, r2, r3
 8001f1a:	4a09      	ldr	r2, [pc, #36]	; (8001f40 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <HAL_RCC_ClockConfig+0x1c8>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff f9d4 	bl	80012d0 <HAL_InitTick>

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40023c00 	.word	0x40023c00
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	08003b44 	.word	0x08003b44
 8001f40:	200000a0 	.word	0x200000a0
 8001f44:	200000a4 	.word	0x200000a4

08001f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f4c:	b090      	sub	sp, #64	; 0x40
 8001f4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	637b      	str	r3, [r7, #52]	; 0x34
 8001f54:	2300      	movs	r3, #0
 8001f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f58:	2300      	movs	r3, #0
 8001f5a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f60:	4b59      	ldr	r3, [pc, #356]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 030c 	and.w	r3, r3, #12
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d00d      	beq.n	8001f88 <HAL_RCC_GetSysClockFreq+0x40>
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	f200 80a1 	bhi.w	80020b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d002      	beq.n	8001f7c <HAL_RCC_GetSysClockFreq+0x34>
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d003      	beq.n	8001f82 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f7a:	e09b      	b.n	80020b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f7c:	4b53      	ldr	r3, [pc, #332]	; (80020cc <HAL_RCC_GetSysClockFreq+0x184>)
 8001f7e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001f80:	e09b      	b.n	80020ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f82:	4b53      	ldr	r3, [pc, #332]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f84:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f86:	e098      	b.n	80020ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f88:	4b4f      	ldr	r3, [pc, #316]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f90:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f92:	4b4d      	ldr	r3, [pc, #308]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d028      	beq.n	8001ff0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f9e:	4b4a      	ldr	r3, [pc, #296]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	099b      	lsrs	r3, r3, #6
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	623b      	str	r3, [r7, #32]
 8001fa8:	627a      	str	r2, [r7, #36]	; 0x24
 8001faa:	6a3b      	ldr	r3, [r7, #32]
 8001fac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4b47      	ldr	r3, [pc, #284]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001fb4:	fb03 f201 	mul.w	r2, r3, r1
 8001fb8:	2300      	movs	r3, #0
 8001fba:	fb00 f303 	mul.w	r3, r0, r3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	4a43      	ldr	r2, [pc, #268]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001fc2:	fba0 1202 	umull	r1, r2, r0, r2
 8001fc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fc8:	460a      	mov	r2, r1
 8001fca:	62ba      	str	r2, [r7, #40]	; 0x28
 8001fcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fce:	4413      	add	r3, r2
 8001fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	61bb      	str	r3, [r7, #24]
 8001fd8:	61fa      	str	r2, [r7, #28]
 8001fda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fde:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001fe2:	f7fe f94d 	bl	8000280 <__aeabi_uldivmod>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4613      	mov	r3, r2
 8001fec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fee:	e053      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ff0:	4b35      	ldr	r3, [pc, #212]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	099b      	lsrs	r3, r3, #6
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	617a      	str	r2, [r7, #20]
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002002:	f04f 0b00 	mov.w	fp, #0
 8002006:	4652      	mov	r2, sl
 8002008:	465b      	mov	r3, fp
 800200a:	f04f 0000 	mov.w	r0, #0
 800200e:	f04f 0100 	mov.w	r1, #0
 8002012:	0159      	lsls	r1, r3, #5
 8002014:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002018:	0150      	lsls	r0, r2, #5
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	ebb2 080a 	subs.w	r8, r2, sl
 8002022:	eb63 090b 	sbc.w	r9, r3, fp
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	f04f 0300 	mov.w	r3, #0
 800202e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002032:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002036:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800203a:	ebb2 0408 	subs.w	r4, r2, r8
 800203e:	eb63 0509 	sbc.w	r5, r3, r9
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	f04f 0300 	mov.w	r3, #0
 800204a:	00eb      	lsls	r3, r5, #3
 800204c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002050:	00e2      	lsls	r2, r4, #3
 8002052:	4614      	mov	r4, r2
 8002054:	461d      	mov	r5, r3
 8002056:	eb14 030a 	adds.w	r3, r4, sl
 800205a:	603b      	str	r3, [r7, #0]
 800205c:	eb45 030b 	adc.w	r3, r5, fp
 8002060:	607b      	str	r3, [r7, #4]
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	f04f 0300 	mov.w	r3, #0
 800206a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800206e:	4629      	mov	r1, r5
 8002070:	028b      	lsls	r3, r1, #10
 8002072:	4621      	mov	r1, r4
 8002074:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002078:	4621      	mov	r1, r4
 800207a:	028a      	lsls	r2, r1, #10
 800207c:	4610      	mov	r0, r2
 800207e:	4619      	mov	r1, r3
 8002080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002082:	2200      	movs	r2, #0
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	60fa      	str	r2, [r7, #12]
 8002088:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800208c:	f7fe f8f8 	bl	8000280 <__aeabi_uldivmod>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4613      	mov	r3, r2
 8002096:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002098:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	0c1b      	lsrs	r3, r3, #16
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	3301      	adds	r3, #1
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80020a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020b2:	e002      	b.n	80020ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <HAL_RCC_GetSysClockFreq+0x184>)
 80020b6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3740      	adds	r7, #64	; 0x40
 80020c0:	46bd      	mov	sp, r7
 80020c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020c6:	bf00      	nop
 80020c8:	40023800 	.word	0x40023800
 80020cc:	00f42400 	.word	0x00f42400
 80020d0:	017d7840 	.word	0x017d7840

080020d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020d8:	4b03      	ldr	r3, [pc, #12]	; (80020e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	200000a0 	.word	0x200000a0

080020ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020f0:	f7ff fff0 	bl	80020d4 <HAL_RCC_GetHCLKFreq>
 80020f4:	4602      	mov	r2, r0
 80020f6:	4b05      	ldr	r3, [pc, #20]	; (800210c <HAL_RCC_GetPCLK1Freq+0x20>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	0a9b      	lsrs	r3, r3, #10
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	4903      	ldr	r1, [pc, #12]	; (8002110 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002102:	5ccb      	ldrb	r3, [r1, r3]
 8002104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002108:	4618      	mov	r0, r3
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40023800 	.word	0x40023800
 8002110:	08003b54 	.word	0x08003b54

08002114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002118:	f7ff ffdc 	bl	80020d4 <HAL_RCC_GetHCLKFreq>
 800211c:	4602      	mov	r2, r0
 800211e:	4b05      	ldr	r3, [pc, #20]	; (8002134 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	0b5b      	lsrs	r3, r3, #13
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	4903      	ldr	r1, [pc, #12]	; (8002138 <HAL_RCC_GetPCLK2Freq+0x24>)
 800212a:	5ccb      	ldrb	r3, [r1, r3]
 800212c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002130:	4618      	mov	r0, r3
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40023800 	.word	0x40023800
 8002138:	08003b54 	.word	0x08003b54

0800213c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e03f      	b.n	80021ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d106      	bne.n	8002168 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7fe ff0c 	bl	8000f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2224      	movs	r2, #36	; 0x24
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800217e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f9cb 	bl	800251c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	691a      	ldr	r2, [r3, #16]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002194:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	695a      	ldr	r2, [r3, #20]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68da      	ldr	r2, [r3, #12]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2220      	movs	r2, #32
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2220      	movs	r2, #32
 80021c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b08a      	sub	sp, #40	; 0x28
 80021da:	af02      	add	r7, sp, #8
 80021dc:	60f8      	str	r0, [r7, #12]
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	603b      	str	r3, [r7, #0]
 80021e2:	4613      	mov	r3, r2
 80021e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b20      	cmp	r3, #32
 80021f4:	d17c      	bne.n	80022f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d002      	beq.n	8002202 <HAL_UART_Transmit+0x2c>
 80021fc:	88fb      	ldrh	r3, [r7, #6]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e075      	b.n	80022f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <HAL_UART_Transmit+0x3e>
 8002210:	2302      	movs	r3, #2
 8002212:	e06e      	b.n	80022f2 <HAL_UART_Transmit+0x11c>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2221      	movs	r2, #33	; 0x21
 8002226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800222a:	f7ff f895 	bl	8001358 <HAL_GetTick>
 800222e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	88fa      	ldrh	r2, [r7, #6]
 8002234:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	88fa      	ldrh	r2, [r7, #6]
 800223a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002244:	d108      	bne.n	8002258 <HAL_UART_Transmit+0x82>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d104      	bne.n	8002258 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	61bb      	str	r3, [r7, #24]
 8002256:	e003      	b.n	8002260 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800225c:	2300      	movs	r3, #0
 800225e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002268:	e02a      	b.n	80022c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	2200      	movs	r2, #0
 8002272:	2180      	movs	r1, #128	; 0x80
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 f8e2 	bl	800243e <UART_WaitOnFlagUntilTimeout>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e036      	b.n	80022f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10b      	bne.n	80022a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	461a      	mov	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002298:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	3302      	adds	r3, #2
 800229e:	61bb      	str	r3, [r7, #24]
 80022a0:	e007      	b.n	80022b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	781a      	ldrb	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	3301      	adds	r3, #1
 80022b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	3b01      	subs	r3, #1
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1cf      	bne.n	800226a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	2200      	movs	r2, #0
 80022d2:	2140      	movs	r1, #64	; 0x40
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f000 f8b2 	bl	800243e <UART_WaitOnFlagUntilTimeout>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e006      	b.n	80022f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	e000      	b.n	80022f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80022f0:	2302      	movs	r3, #2
  }
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3720      	adds	r7, #32
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b08a      	sub	sp, #40	; 0x28
 80022fe:	af02      	add	r7, sp, #8
 8002300:	60f8      	str	r0, [r7, #12]
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	603b      	str	r3, [r7, #0]
 8002306:	4613      	mov	r3, r2
 8002308:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b20      	cmp	r3, #32
 8002318:	f040 808c 	bne.w	8002434 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d002      	beq.n	8002328 <HAL_UART_Receive+0x2e>
 8002322:	88fb      	ldrh	r3, [r7, #6]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e084      	b.n	8002436 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002332:	2b01      	cmp	r3, #1
 8002334:	d101      	bne.n	800233a <HAL_UART_Receive+0x40>
 8002336:	2302      	movs	r3, #2
 8002338:	e07d      	b.n	8002436 <HAL_UART_Receive+0x13c>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2222      	movs	r2, #34	; 0x22
 800234c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002356:	f7fe ffff 	bl	8001358 <HAL_GetTick>
 800235a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	88fa      	ldrh	r2, [r7, #6]
 8002360:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	88fa      	ldrh	r2, [r7, #6]
 8002366:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002370:	d108      	bne.n	8002384 <HAL_UART_Receive+0x8a>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d104      	bne.n	8002384 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800237a:	2300      	movs	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	61bb      	str	r3, [r7, #24]
 8002382:	e003      	b.n	800238c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002388:	2300      	movs	r3, #0
 800238a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002394:	e043      	b.n	800241e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	2200      	movs	r2, #0
 800239e:	2120      	movs	r1, #32
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f000 f84c 	bl	800243e <UART_WaitOnFlagUntilTimeout>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e042      	b.n	8002436 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10c      	bne.n	80023d0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	b29b      	uxth	r3, r3
 80023be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	3302      	adds	r3, #2
 80023cc:	61bb      	str	r3, [r7, #24]
 80023ce:	e01f      	b.n	8002410 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023d8:	d007      	beq.n	80023ea <HAL_UART_Receive+0xf0>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10a      	bne.n	80023f8 <HAL_UART_Receive+0xfe>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d106      	bne.n	80023f8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	701a      	strb	r2, [r3, #0]
 80023f6:	e008      	b.n	800240a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002404:	b2da      	uxtb	r2, r3
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3301      	adds	r3, #1
 800240e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002414:	b29b      	uxth	r3, r3
 8002416:	3b01      	subs	r3, #1
 8002418:	b29a      	uxth	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002422:	b29b      	uxth	r3, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1b6      	bne.n	8002396 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2220      	movs	r2, #32
 800242c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	e000      	b.n	8002436 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002434:	2302      	movs	r3, #2
  }
}
 8002436:	4618      	mov	r0, r3
 8002438:	3720      	adds	r7, #32
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b090      	sub	sp, #64	; 0x40
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	603b      	str	r3, [r7, #0]
 800244a:	4613      	mov	r3, r2
 800244c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800244e:	e050      	b.n	80024f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002456:	d04c      	beq.n	80024f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800245a:	2b00      	cmp	r3, #0
 800245c:	d007      	beq.n	800246e <UART_WaitOnFlagUntilTimeout+0x30>
 800245e:	f7fe ff7b 	bl	8001358 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800246a:	429a      	cmp	r2, r3
 800246c:	d241      	bcs.n	80024f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	330c      	adds	r3, #12
 8002474:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002478:	e853 3f00 	ldrex	r3, [r3]
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002484:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	330c      	adds	r3, #12
 800248c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800248e:	637a      	str	r2, [r7, #52]	; 0x34
 8002490:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002492:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002494:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002496:	e841 2300 	strex	r3, r2, [r1]
 800249a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800249c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1e5      	bne.n	800246e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	3314      	adds	r3, #20
 80024a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	e853 3f00 	ldrex	r3, [r3]
 80024b0:	613b      	str	r3, [r7, #16]
   return(result);
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	f023 0301 	bic.w	r3, r3, #1
 80024b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	3314      	adds	r3, #20
 80024c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024c2:	623a      	str	r2, [r7, #32]
 80024c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024c6:	69f9      	ldr	r1, [r7, #28]
 80024c8:	6a3a      	ldr	r2, [r7, #32]
 80024ca:	e841 2300 	strex	r3, r2, [r1]
 80024ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1e5      	bne.n	80024a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2220      	movs	r2, #32
 80024da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2220      	movs	r2, #32
 80024e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e00f      	b.n	8002512 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	4013      	ands	r3, r2
 80024fc:	68ba      	ldr	r2, [r7, #8]
 80024fe:	429a      	cmp	r2, r3
 8002500:	bf0c      	ite	eq
 8002502:	2301      	moveq	r3, #1
 8002504:	2300      	movne	r3, #0
 8002506:	b2db      	uxtb	r3, r3
 8002508:	461a      	mov	r2, r3
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	429a      	cmp	r2, r3
 800250e:	d09f      	beq.n	8002450 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3740      	adds	r7, #64	; 0x40
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800251c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002520:	b0c0      	sub	sp, #256	; 0x100
 8002522:	af00      	add	r7, sp, #0
 8002524:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002538:	68d9      	ldr	r1, [r3, #12]
 800253a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	ea40 0301 	orr.w	r3, r0, r1
 8002544:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	431a      	orrs	r2, r3
 8002554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	431a      	orrs	r2, r3
 800255c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002574:	f021 010c 	bic.w	r1, r1, #12
 8002578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002582:	430b      	orrs	r3, r1
 8002584:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002596:	6999      	ldr	r1, [r3, #24]
 8002598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	ea40 0301 	orr.w	r3, r0, r1
 80025a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	4b8f      	ldr	r3, [pc, #572]	; (80027e8 <UART_SetConfig+0x2cc>)
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d005      	beq.n	80025bc <UART_SetConfig+0xa0>
 80025b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	4b8d      	ldr	r3, [pc, #564]	; (80027ec <UART_SetConfig+0x2d0>)
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d104      	bne.n	80025c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025bc:	f7ff fdaa 	bl	8002114 <HAL_RCC_GetPCLK2Freq>
 80025c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80025c4:	e003      	b.n	80025ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025c6:	f7ff fd91 	bl	80020ec <HAL_RCC_GetPCLK1Freq>
 80025ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d2:	69db      	ldr	r3, [r3, #28]
 80025d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025d8:	f040 810c 	bne.w	80027f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025e0:	2200      	movs	r2, #0
 80025e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80025e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80025ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80025ee:	4622      	mov	r2, r4
 80025f0:	462b      	mov	r3, r5
 80025f2:	1891      	adds	r1, r2, r2
 80025f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80025f6:	415b      	adcs	r3, r3
 80025f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80025fe:	4621      	mov	r1, r4
 8002600:	eb12 0801 	adds.w	r8, r2, r1
 8002604:	4629      	mov	r1, r5
 8002606:	eb43 0901 	adc.w	r9, r3, r1
 800260a:	f04f 0200 	mov.w	r2, #0
 800260e:	f04f 0300 	mov.w	r3, #0
 8002612:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002616:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800261a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800261e:	4690      	mov	r8, r2
 8002620:	4699      	mov	r9, r3
 8002622:	4623      	mov	r3, r4
 8002624:	eb18 0303 	adds.w	r3, r8, r3
 8002628:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800262c:	462b      	mov	r3, r5
 800262e:	eb49 0303 	adc.w	r3, r9, r3
 8002632:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002642:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002646:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800264a:	460b      	mov	r3, r1
 800264c:	18db      	adds	r3, r3, r3
 800264e:	653b      	str	r3, [r7, #80]	; 0x50
 8002650:	4613      	mov	r3, r2
 8002652:	eb42 0303 	adc.w	r3, r2, r3
 8002656:	657b      	str	r3, [r7, #84]	; 0x54
 8002658:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800265c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002660:	f7fd fe0e 	bl	8000280 <__aeabi_uldivmod>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4b61      	ldr	r3, [pc, #388]	; (80027f0 <UART_SetConfig+0x2d4>)
 800266a:	fba3 2302 	umull	r2, r3, r3, r2
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	011c      	lsls	r4, r3, #4
 8002672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002676:	2200      	movs	r2, #0
 8002678:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800267c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002680:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002684:	4642      	mov	r2, r8
 8002686:	464b      	mov	r3, r9
 8002688:	1891      	adds	r1, r2, r2
 800268a:	64b9      	str	r1, [r7, #72]	; 0x48
 800268c:	415b      	adcs	r3, r3
 800268e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002690:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002694:	4641      	mov	r1, r8
 8002696:	eb12 0a01 	adds.w	sl, r2, r1
 800269a:	4649      	mov	r1, r9
 800269c:	eb43 0b01 	adc.w	fp, r3, r1
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026b4:	4692      	mov	sl, r2
 80026b6:	469b      	mov	fp, r3
 80026b8:	4643      	mov	r3, r8
 80026ba:	eb1a 0303 	adds.w	r3, sl, r3
 80026be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026c2:	464b      	mov	r3, r9
 80026c4:	eb4b 0303 	adc.w	r3, fp, r3
 80026c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80026cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80026d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80026dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80026e0:	460b      	mov	r3, r1
 80026e2:	18db      	adds	r3, r3, r3
 80026e4:	643b      	str	r3, [r7, #64]	; 0x40
 80026e6:	4613      	mov	r3, r2
 80026e8:	eb42 0303 	adc.w	r3, r2, r3
 80026ec:	647b      	str	r3, [r7, #68]	; 0x44
 80026ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80026f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80026f6:	f7fd fdc3 	bl	8000280 <__aeabi_uldivmod>
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	4611      	mov	r1, r2
 8002700:	4b3b      	ldr	r3, [pc, #236]	; (80027f0 <UART_SetConfig+0x2d4>)
 8002702:	fba3 2301 	umull	r2, r3, r3, r1
 8002706:	095b      	lsrs	r3, r3, #5
 8002708:	2264      	movs	r2, #100	; 0x64
 800270a:	fb02 f303 	mul.w	r3, r2, r3
 800270e:	1acb      	subs	r3, r1, r3
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002716:	4b36      	ldr	r3, [pc, #216]	; (80027f0 <UART_SetConfig+0x2d4>)
 8002718:	fba3 2302 	umull	r2, r3, r3, r2
 800271c:	095b      	lsrs	r3, r3, #5
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002724:	441c      	add	r4, r3
 8002726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800272a:	2200      	movs	r2, #0
 800272c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002730:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002734:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002738:	4642      	mov	r2, r8
 800273a:	464b      	mov	r3, r9
 800273c:	1891      	adds	r1, r2, r2
 800273e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002740:	415b      	adcs	r3, r3
 8002742:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002744:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002748:	4641      	mov	r1, r8
 800274a:	1851      	adds	r1, r2, r1
 800274c:	6339      	str	r1, [r7, #48]	; 0x30
 800274e:	4649      	mov	r1, r9
 8002750:	414b      	adcs	r3, r1
 8002752:	637b      	str	r3, [r7, #52]	; 0x34
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	f04f 0300 	mov.w	r3, #0
 800275c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002760:	4659      	mov	r1, fp
 8002762:	00cb      	lsls	r3, r1, #3
 8002764:	4651      	mov	r1, sl
 8002766:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800276a:	4651      	mov	r1, sl
 800276c:	00ca      	lsls	r2, r1, #3
 800276e:	4610      	mov	r0, r2
 8002770:	4619      	mov	r1, r3
 8002772:	4603      	mov	r3, r0
 8002774:	4642      	mov	r2, r8
 8002776:	189b      	adds	r3, r3, r2
 8002778:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800277c:	464b      	mov	r3, r9
 800277e:	460a      	mov	r2, r1
 8002780:	eb42 0303 	adc.w	r3, r2, r3
 8002784:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002794:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002798:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800279c:	460b      	mov	r3, r1
 800279e:	18db      	adds	r3, r3, r3
 80027a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80027a2:	4613      	mov	r3, r2
 80027a4:	eb42 0303 	adc.w	r3, r2, r3
 80027a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80027b2:	f7fd fd65 	bl	8000280 <__aeabi_uldivmod>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	4b0d      	ldr	r3, [pc, #52]	; (80027f0 <UART_SetConfig+0x2d4>)
 80027bc:	fba3 1302 	umull	r1, r3, r3, r2
 80027c0:	095b      	lsrs	r3, r3, #5
 80027c2:	2164      	movs	r1, #100	; 0x64
 80027c4:	fb01 f303 	mul.w	r3, r1, r3
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	3332      	adds	r3, #50	; 0x32
 80027ce:	4a08      	ldr	r2, [pc, #32]	; (80027f0 <UART_SetConfig+0x2d4>)
 80027d0:	fba2 2303 	umull	r2, r3, r2, r3
 80027d4:	095b      	lsrs	r3, r3, #5
 80027d6:	f003 0207 	and.w	r2, r3, #7
 80027da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4422      	add	r2, r4
 80027e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80027e4:	e105      	b.n	80029f2 <UART_SetConfig+0x4d6>
 80027e6:	bf00      	nop
 80027e8:	40011000 	.word	0x40011000
 80027ec:	40011400 	.word	0x40011400
 80027f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027f8:	2200      	movs	r2, #0
 80027fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80027fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002802:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002806:	4642      	mov	r2, r8
 8002808:	464b      	mov	r3, r9
 800280a:	1891      	adds	r1, r2, r2
 800280c:	6239      	str	r1, [r7, #32]
 800280e:	415b      	adcs	r3, r3
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
 8002812:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002816:	4641      	mov	r1, r8
 8002818:	1854      	adds	r4, r2, r1
 800281a:	4649      	mov	r1, r9
 800281c:	eb43 0501 	adc.w	r5, r3, r1
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	f04f 0300 	mov.w	r3, #0
 8002828:	00eb      	lsls	r3, r5, #3
 800282a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800282e:	00e2      	lsls	r2, r4, #3
 8002830:	4614      	mov	r4, r2
 8002832:	461d      	mov	r5, r3
 8002834:	4643      	mov	r3, r8
 8002836:	18e3      	adds	r3, r4, r3
 8002838:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800283c:	464b      	mov	r3, r9
 800283e:	eb45 0303 	adc.w	r3, r5, r3
 8002842:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002852:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	f04f 0300 	mov.w	r3, #0
 800285e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002862:	4629      	mov	r1, r5
 8002864:	008b      	lsls	r3, r1, #2
 8002866:	4621      	mov	r1, r4
 8002868:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800286c:	4621      	mov	r1, r4
 800286e:	008a      	lsls	r2, r1, #2
 8002870:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002874:	f7fd fd04 	bl	8000280 <__aeabi_uldivmod>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4b60      	ldr	r3, [pc, #384]	; (8002a00 <UART_SetConfig+0x4e4>)
 800287e:	fba3 2302 	umull	r2, r3, r3, r2
 8002882:	095b      	lsrs	r3, r3, #5
 8002884:	011c      	lsls	r4, r3, #4
 8002886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800288a:	2200      	movs	r2, #0
 800288c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002890:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002894:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002898:	4642      	mov	r2, r8
 800289a:	464b      	mov	r3, r9
 800289c:	1891      	adds	r1, r2, r2
 800289e:	61b9      	str	r1, [r7, #24]
 80028a0:	415b      	adcs	r3, r3
 80028a2:	61fb      	str	r3, [r7, #28]
 80028a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028a8:	4641      	mov	r1, r8
 80028aa:	1851      	adds	r1, r2, r1
 80028ac:	6139      	str	r1, [r7, #16]
 80028ae:	4649      	mov	r1, r9
 80028b0:	414b      	adcs	r3, r1
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028c0:	4659      	mov	r1, fp
 80028c2:	00cb      	lsls	r3, r1, #3
 80028c4:	4651      	mov	r1, sl
 80028c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028ca:	4651      	mov	r1, sl
 80028cc:	00ca      	lsls	r2, r1, #3
 80028ce:	4610      	mov	r0, r2
 80028d0:	4619      	mov	r1, r3
 80028d2:	4603      	mov	r3, r0
 80028d4:	4642      	mov	r2, r8
 80028d6:	189b      	adds	r3, r3, r2
 80028d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028dc:	464b      	mov	r3, r9
 80028de:	460a      	mov	r2, r1
 80028e0:	eb42 0303 	adc.w	r3, r2, r3
 80028e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80028e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80028f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	f04f 0300 	mov.w	r3, #0
 80028fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002900:	4649      	mov	r1, r9
 8002902:	008b      	lsls	r3, r1, #2
 8002904:	4641      	mov	r1, r8
 8002906:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800290a:	4641      	mov	r1, r8
 800290c:	008a      	lsls	r2, r1, #2
 800290e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002912:	f7fd fcb5 	bl	8000280 <__aeabi_uldivmod>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	4b39      	ldr	r3, [pc, #228]	; (8002a00 <UART_SetConfig+0x4e4>)
 800291c:	fba3 1302 	umull	r1, r3, r3, r2
 8002920:	095b      	lsrs	r3, r3, #5
 8002922:	2164      	movs	r1, #100	; 0x64
 8002924:	fb01 f303 	mul.w	r3, r1, r3
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	3332      	adds	r3, #50	; 0x32
 800292e:	4a34      	ldr	r2, [pc, #208]	; (8002a00 <UART_SetConfig+0x4e4>)
 8002930:	fba2 2303 	umull	r2, r3, r2, r3
 8002934:	095b      	lsrs	r3, r3, #5
 8002936:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800293a:	441c      	add	r4, r3
 800293c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002940:	2200      	movs	r2, #0
 8002942:	673b      	str	r3, [r7, #112]	; 0x70
 8002944:	677a      	str	r2, [r7, #116]	; 0x74
 8002946:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800294a:	4642      	mov	r2, r8
 800294c:	464b      	mov	r3, r9
 800294e:	1891      	adds	r1, r2, r2
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	415b      	adcs	r3, r3
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800295a:	4641      	mov	r1, r8
 800295c:	1851      	adds	r1, r2, r1
 800295e:	6039      	str	r1, [r7, #0]
 8002960:	4649      	mov	r1, r9
 8002962:	414b      	adcs	r3, r1
 8002964:	607b      	str	r3, [r7, #4]
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002972:	4659      	mov	r1, fp
 8002974:	00cb      	lsls	r3, r1, #3
 8002976:	4651      	mov	r1, sl
 8002978:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800297c:	4651      	mov	r1, sl
 800297e:	00ca      	lsls	r2, r1, #3
 8002980:	4610      	mov	r0, r2
 8002982:	4619      	mov	r1, r3
 8002984:	4603      	mov	r3, r0
 8002986:	4642      	mov	r2, r8
 8002988:	189b      	adds	r3, r3, r2
 800298a:	66bb      	str	r3, [r7, #104]	; 0x68
 800298c:	464b      	mov	r3, r9
 800298e:	460a      	mov	r2, r1
 8002990:	eb42 0303 	adc.w	r3, r2, r3
 8002994:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	663b      	str	r3, [r7, #96]	; 0x60
 80029a0:	667a      	str	r2, [r7, #100]	; 0x64
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80029ae:	4649      	mov	r1, r9
 80029b0:	008b      	lsls	r3, r1, #2
 80029b2:	4641      	mov	r1, r8
 80029b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029b8:	4641      	mov	r1, r8
 80029ba:	008a      	lsls	r2, r1, #2
 80029bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80029c0:	f7fd fc5e 	bl	8000280 <__aeabi_uldivmod>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <UART_SetConfig+0x4e4>)
 80029ca:	fba3 1302 	umull	r1, r3, r3, r2
 80029ce:	095b      	lsrs	r3, r3, #5
 80029d0:	2164      	movs	r1, #100	; 0x64
 80029d2:	fb01 f303 	mul.w	r3, r1, r3
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	011b      	lsls	r3, r3, #4
 80029da:	3332      	adds	r3, #50	; 0x32
 80029dc:	4a08      	ldr	r2, [pc, #32]	; (8002a00 <UART_SetConfig+0x4e4>)
 80029de:	fba2 2303 	umull	r2, r3, r2, r3
 80029e2:	095b      	lsrs	r3, r3, #5
 80029e4:	f003 020f 	and.w	r2, r3, #15
 80029e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4422      	add	r2, r4
 80029f0:	609a      	str	r2, [r3, #8]
}
 80029f2:	bf00      	nop
 80029f4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80029f8:	46bd      	mov	sp, r7
 80029fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029fe:	bf00      	nop
 8002a00:	51eb851f 	.word	0x51eb851f

08002a04 <__errno>:
 8002a04:	4b01      	ldr	r3, [pc, #4]	; (8002a0c <__errno+0x8>)
 8002a06:	6818      	ldr	r0, [r3, #0]
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	200000ac 	.word	0x200000ac

08002a10 <__libc_init_array>:
 8002a10:	b570      	push	{r4, r5, r6, lr}
 8002a12:	4d0d      	ldr	r5, [pc, #52]	; (8002a48 <__libc_init_array+0x38>)
 8002a14:	4c0d      	ldr	r4, [pc, #52]	; (8002a4c <__libc_init_array+0x3c>)
 8002a16:	1b64      	subs	r4, r4, r5
 8002a18:	10a4      	asrs	r4, r4, #2
 8002a1a:	2600      	movs	r6, #0
 8002a1c:	42a6      	cmp	r6, r4
 8002a1e:	d109      	bne.n	8002a34 <__libc_init_array+0x24>
 8002a20:	4d0b      	ldr	r5, [pc, #44]	; (8002a50 <__libc_init_array+0x40>)
 8002a22:	4c0c      	ldr	r4, [pc, #48]	; (8002a54 <__libc_init_array+0x44>)
 8002a24:	f001 f824 	bl	8003a70 <_init>
 8002a28:	1b64      	subs	r4, r4, r5
 8002a2a:	10a4      	asrs	r4, r4, #2
 8002a2c:	2600      	movs	r6, #0
 8002a2e:	42a6      	cmp	r6, r4
 8002a30:	d105      	bne.n	8002a3e <__libc_init_array+0x2e>
 8002a32:	bd70      	pop	{r4, r5, r6, pc}
 8002a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a38:	4798      	blx	r3
 8002a3a:	3601      	adds	r6, #1
 8002a3c:	e7ee      	b.n	8002a1c <__libc_init_array+0xc>
 8002a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a42:	4798      	blx	r3
 8002a44:	3601      	adds	r6, #1
 8002a46:	e7f2      	b.n	8002a2e <__libc_init_array+0x1e>
 8002a48:	08003bfc 	.word	0x08003bfc
 8002a4c:	08003bfc 	.word	0x08003bfc
 8002a50:	08003bfc 	.word	0x08003bfc
 8002a54:	08003c00 	.word	0x08003c00

08002a58 <memset>:
 8002a58:	4402      	add	r2, r0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d100      	bne.n	8002a62 <memset+0xa>
 8002a60:	4770      	bx	lr
 8002a62:	f803 1b01 	strb.w	r1, [r3], #1
 8002a66:	e7f9      	b.n	8002a5c <memset+0x4>

08002a68 <iprintf>:
 8002a68:	b40f      	push	{r0, r1, r2, r3}
 8002a6a:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <iprintf+0x2c>)
 8002a6c:	b513      	push	{r0, r1, r4, lr}
 8002a6e:	681c      	ldr	r4, [r3, #0]
 8002a70:	b124      	cbz	r4, 8002a7c <iprintf+0x14>
 8002a72:	69a3      	ldr	r3, [r4, #24]
 8002a74:	b913      	cbnz	r3, 8002a7c <iprintf+0x14>
 8002a76:	4620      	mov	r0, r4
 8002a78:	f000 fa5e 	bl	8002f38 <__sinit>
 8002a7c:	ab05      	add	r3, sp, #20
 8002a7e:	9a04      	ldr	r2, [sp, #16]
 8002a80:	68a1      	ldr	r1, [r4, #8]
 8002a82:	9301      	str	r3, [sp, #4]
 8002a84:	4620      	mov	r0, r4
 8002a86:	f000 fc67 	bl	8003358 <_vfiprintf_r>
 8002a8a:	b002      	add	sp, #8
 8002a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a90:	b004      	add	sp, #16
 8002a92:	4770      	bx	lr
 8002a94:	200000ac 	.word	0x200000ac

08002a98 <_puts_r>:
 8002a98:	b570      	push	{r4, r5, r6, lr}
 8002a9a:	460e      	mov	r6, r1
 8002a9c:	4605      	mov	r5, r0
 8002a9e:	b118      	cbz	r0, 8002aa8 <_puts_r+0x10>
 8002aa0:	6983      	ldr	r3, [r0, #24]
 8002aa2:	b90b      	cbnz	r3, 8002aa8 <_puts_r+0x10>
 8002aa4:	f000 fa48 	bl	8002f38 <__sinit>
 8002aa8:	69ab      	ldr	r3, [r5, #24]
 8002aaa:	68ac      	ldr	r4, [r5, #8]
 8002aac:	b913      	cbnz	r3, 8002ab4 <_puts_r+0x1c>
 8002aae:	4628      	mov	r0, r5
 8002ab0:	f000 fa42 	bl	8002f38 <__sinit>
 8002ab4:	4b2c      	ldr	r3, [pc, #176]	; (8002b68 <_puts_r+0xd0>)
 8002ab6:	429c      	cmp	r4, r3
 8002ab8:	d120      	bne.n	8002afc <_puts_r+0x64>
 8002aba:	686c      	ldr	r4, [r5, #4]
 8002abc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002abe:	07db      	lsls	r3, r3, #31
 8002ac0:	d405      	bmi.n	8002ace <_puts_r+0x36>
 8002ac2:	89a3      	ldrh	r3, [r4, #12]
 8002ac4:	0598      	lsls	r0, r3, #22
 8002ac6:	d402      	bmi.n	8002ace <_puts_r+0x36>
 8002ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002aca:	f000 fad3 	bl	8003074 <__retarget_lock_acquire_recursive>
 8002ace:	89a3      	ldrh	r3, [r4, #12]
 8002ad0:	0719      	lsls	r1, r3, #28
 8002ad2:	d51d      	bpl.n	8002b10 <_puts_r+0x78>
 8002ad4:	6923      	ldr	r3, [r4, #16]
 8002ad6:	b1db      	cbz	r3, 8002b10 <_puts_r+0x78>
 8002ad8:	3e01      	subs	r6, #1
 8002ada:	68a3      	ldr	r3, [r4, #8]
 8002adc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	60a3      	str	r3, [r4, #8]
 8002ae4:	bb39      	cbnz	r1, 8002b36 <_puts_r+0x9e>
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	da38      	bge.n	8002b5c <_puts_r+0xc4>
 8002aea:	4622      	mov	r2, r4
 8002aec:	210a      	movs	r1, #10
 8002aee:	4628      	mov	r0, r5
 8002af0:	f000 f848 	bl	8002b84 <__swbuf_r>
 8002af4:	3001      	adds	r0, #1
 8002af6:	d011      	beq.n	8002b1c <_puts_r+0x84>
 8002af8:	250a      	movs	r5, #10
 8002afa:	e011      	b.n	8002b20 <_puts_r+0x88>
 8002afc:	4b1b      	ldr	r3, [pc, #108]	; (8002b6c <_puts_r+0xd4>)
 8002afe:	429c      	cmp	r4, r3
 8002b00:	d101      	bne.n	8002b06 <_puts_r+0x6e>
 8002b02:	68ac      	ldr	r4, [r5, #8]
 8002b04:	e7da      	b.n	8002abc <_puts_r+0x24>
 8002b06:	4b1a      	ldr	r3, [pc, #104]	; (8002b70 <_puts_r+0xd8>)
 8002b08:	429c      	cmp	r4, r3
 8002b0a:	bf08      	it	eq
 8002b0c:	68ec      	ldreq	r4, [r5, #12]
 8002b0e:	e7d5      	b.n	8002abc <_puts_r+0x24>
 8002b10:	4621      	mov	r1, r4
 8002b12:	4628      	mov	r0, r5
 8002b14:	f000 f888 	bl	8002c28 <__swsetup_r>
 8002b18:	2800      	cmp	r0, #0
 8002b1a:	d0dd      	beq.n	8002ad8 <_puts_r+0x40>
 8002b1c:	f04f 35ff 	mov.w	r5, #4294967295
 8002b20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b22:	07da      	lsls	r2, r3, #31
 8002b24:	d405      	bmi.n	8002b32 <_puts_r+0x9a>
 8002b26:	89a3      	ldrh	r3, [r4, #12]
 8002b28:	059b      	lsls	r3, r3, #22
 8002b2a:	d402      	bmi.n	8002b32 <_puts_r+0x9a>
 8002b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b2e:	f000 faa2 	bl	8003076 <__retarget_lock_release_recursive>
 8002b32:	4628      	mov	r0, r5
 8002b34:	bd70      	pop	{r4, r5, r6, pc}
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	da04      	bge.n	8002b44 <_puts_r+0xac>
 8002b3a:	69a2      	ldr	r2, [r4, #24]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	dc06      	bgt.n	8002b4e <_puts_r+0xb6>
 8002b40:	290a      	cmp	r1, #10
 8002b42:	d004      	beq.n	8002b4e <_puts_r+0xb6>
 8002b44:	6823      	ldr	r3, [r4, #0]
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	6022      	str	r2, [r4, #0]
 8002b4a:	7019      	strb	r1, [r3, #0]
 8002b4c:	e7c5      	b.n	8002ada <_puts_r+0x42>
 8002b4e:	4622      	mov	r2, r4
 8002b50:	4628      	mov	r0, r5
 8002b52:	f000 f817 	bl	8002b84 <__swbuf_r>
 8002b56:	3001      	adds	r0, #1
 8002b58:	d1bf      	bne.n	8002ada <_puts_r+0x42>
 8002b5a:	e7df      	b.n	8002b1c <_puts_r+0x84>
 8002b5c:	6823      	ldr	r3, [r4, #0]
 8002b5e:	250a      	movs	r5, #10
 8002b60:	1c5a      	adds	r2, r3, #1
 8002b62:	6022      	str	r2, [r4, #0]
 8002b64:	701d      	strb	r5, [r3, #0]
 8002b66:	e7db      	b.n	8002b20 <_puts_r+0x88>
 8002b68:	08003b80 	.word	0x08003b80
 8002b6c:	08003ba0 	.word	0x08003ba0
 8002b70:	08003b60 	.word	0x08003b60

08002b74 <puts>:
 8002b74:	4b02      	ldr	r3, [pc, #8]	; (8002b80 <puts+0xc>)
 8002b76:	4601      	mov	r1, r0
 8002b78:	6818      	ldr	r0, [r3, #0]
 8002b7a:	f7ff bf8d 	b.w	8002a98 <_puts_r>
 8002b7e:	bf00      	nop
 8002b80:	200000ac 	.word	0x200000ac

08002b84 <__swbuf_r>:
 8002b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b86:	460e      	mov	r6, r1
 8002b88:	4614      	mov	r4, r2
 8002b8a:	4605      	mov	r5, r0
 8002b8c:	b118      	cbz	r0, 8002b96 <__swbuf_r+0x12>
 8002b8e:	6983      	ldr	r3, [r0, #24]
 8002b90:	b90b      	cbnz	r3, 8002b96 <__swbuf_r+0x12>
 8002b92:	f000 f9d1 	bl	8002f38 <__sinit>
 8002b96:	4b21      	ldr	r3, [pc, #132]	; (8002c1c <__swbuf_r+0x98>)
 8002b98:	429c      	cmp	r4, r3
 8002b9a:	d12b      	bne.n	8002bf4 <__swbuf_r+0x70>
 8002b9c:	686c      	ldr	r4, [r5, #4]
 8002b9e:	69a3      	ldr	r3, [r4, #24]
 8002ba0:	60a3      	str	r3, [r4, #8]
 8002ba2:	89a3      	ldrh	r3, [r4, #12]
 8002ba4:	071a      	lsls	r2, r3, #28
 8002ba6:	d52f      	bpl.n	8002c08 <__swbuf_r+0x84>
 8002ba8:	6923      	ldr	r3, [r4, #16]
 8002baa:	b36b      	cbz	r3, 8002c08 <__swbuf_r+0x84>
 8002bac:	6923      	ldr	r3, [r4, #16]
 8002bae:	6820      	ldr	r0, [r4, #0]
 8002bb0:	1ac0      	subs	r0, r0, r3
 8002bb2:	6963      	ldr	r3, [r4, #20]
 8002bb4:	b2f6      	uxtb	r6, r6
 8002bb6:	4283      	cmp	r3, r0
 8002bb8:	4637      	mov	r7, r6
 8002bba:	dc04      	bgt.n	8002bc6 <__swbuf_r+0x42>
 8002bbc:	4621      	mov	r1, r4
 8002bbe:	4628      	mov	r0, r5
 8002bc0:	f000 f926 	bl	8002e10 <_fflush_r>
 8002bc4:	bb30      	cbnz	r0, 8002c14 <__swbuf_r+0x90>
 8002bc6:	68a3      	ldr	r3, [r4, #8]
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	60a3      	str	r3, [r4, #8]
 8002bcc:	6823      	ldr	r3, [r4, #0]
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	6022      	str	r2, [r4, #0]
 8002bd2:	701e      	strb	r6, [r3, #0]
 8002bd4:	6963      	ldr	r3, [r4, #20]
 8002bd6:	3001      	adds	r0, #1
 8002bd8:	4283      	cmp	r3, r0
 8002bda:	d004      	beq.n	8002be6 <__swbuf_r+0x62>
 8002bdc:	89a3      	ldrh	r3, [r4, #12]
 8002bde:	07db      	lsls	r3, r3, #31
 8002be0:	d506      	bpl.n	8002bf0 <__swbuf_r+0x6c>
 8002be2:	2e0a      	cmp	r6, #10
 8002be4:	d104      	bne.n	8002bf0 <__swbuf_r+0x6c>
 8002be6:	4621      	mov	r1, r4
 8002be8:	4628      	mov	r0, r5
 8002bea:	f000 f911 	bl	8002e10 <_fflush_r>
 8002bee:	b988      	cbnz	r0, 8002c14 <__swbuf_r+0x90>
 8002bf0:	4638      	mov	r0, r7
 8002bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bf4:	4b0a      	ldr	r3, [pc, #40]	; (8002c20 <__swbuf_r+0x9c>)
 8002bf6:	429c      	cmp	r4, r3
 8002bf8:	d101      	bne.n	8002bfe <__swbuf_r+0x7a>
 8002bfa:	68ac      	ldr	r4, [r5, #8]
 8002bfc:	e7cf      	b.n	8002b9e <__swbuf_r+0x1a>
 8002bfe:	4b09      	ldr	r3, [pc, #36]	; (8002c24 <__swbuf_r+0xa0>)
 8002c00:	429c      	cmp	r4, r3
 8002c02:	bf08      	it	eq
 8002c04:	68ec      	ldreq	r4, [r5, #12]
 8002c06:	e7ca      	b.n	8002b9e <__swbuf_r+0x1a>
 8002c08:	4621      	mov	r1, r4
 8002c0a:	4628      	mov	r0, r5
 8002c0c:	f000 f80c 	bl	8002c28 <__swsetup_r>
 8002c10:	2800      	cmp	r0, #0
 8002c12:	d0cb      	beq.n	8002bac <__swbuf_r+0x28>
 8002c14:	f04f 37ff 	mov.w	r7, #4294967295
 8002c18:	e7ea      	b.n	8002bf0 <__swbuf_r+0x6c>
 8002c1a:	bf00      	nop
 8002c1c:	08003b80 	.word	0x08003b80
 8002c20:	08003ba0 	.word	0x08003ba0
 8002c24:	08003b60 	.word	0x08003b60

08002c28 <__swsetup_r>:
 8002c28:	4b32      	ldr	r3, [pc, #200]	; (8002cf4 <__swsetup_r+0xcc>)
 8002c2a:	b570      	push	{r4, r5, r6, lr}
 8002c2c:	681d      	ldr	r5, [r3, #0]
 8002c2e:	4606      	mov	r6, r0
 8002c30:	460c      	mov	r4, r1
 8002c32:	b125      	cbz	r5, 8002c3e <__swsetup_r+0x16>
 8002c34:	69ab      	ldr	r3, [r5, #24]
 8002c36:	b913      	cbnz	r3, 8002c3e <__swsetup_r+0x16>
 8002c38:	4628      	mov	r0, r5
 8002c3a:	f000 f97d 	bl	8002f38 <__sinit>
 8002c3e:	4b2e      	ldr	r3, [pc, #184]	; (8002cf8 <__swsetup_r+0xd0>)
 8002c40:	429c      	cmp	r4, r3
 8002c42:	d10f      	bne.n	8002c64 <__swsetup_r+0x3c>
 8002c44:	686c      	ldr	r4, [r5, #4]
 8002c46:	89a3      	ldrh	r3, [r4, #12]
 8002c48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002c4c:	0719      	lsls	r1, r3, #28
 8002c4e:	d42c      	bmi.n	8002caa <__swsetup_r+0x82>
 8002c50:	06dd      	lsls	r5, r3, #27
 8002c52:	d411      	bmi.n	8002c78 <__swsetup_r+0x50>
 8002c54:	2309      	movs	r3, #9
 8002c56:	6033      	str	r3, [r6, #0]
 8002c58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002c5c:	81a3      	strh	r3, [r4, #12]
 8002c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c62:	e03e      	b.n	8002ce2 <__swsetup_r+0xba>
 8002c64:	4b25      	ldr	r3, [pc, #148]	; (8002cfc <__swsetup_r+0xd4>)
 8002c66:	429c      	cmp	r4, r3
 8002c68:	d101      	bne.n	8002c6e <__swsetup_r+0x46>
 8002c6a:	68ac      	ldr	r4, [r5, #8]
 8002c6c:	e7eb      	b.n	8002c46 <__swsetup_r+0x1e>
 8002c6e:	4b24      	ldr	r3, [pc, #144]	; (8002d00 <__swsetup_r+0xd8>)
 8002c70:	429c      	cmp	r4, r3
 8002c72:	bf08      	it	eq
 8002c74:	68ec      	ldreq	r4, [r5, #12]
 8002c76:	e7e6      	b.n	8002c46 <__swsetup_r+0x1e>
 8002c78:	0758      	lsls	r0, r3, #29
 8002c7a:	d512      	bpl.n	8002ca2 <__swsetup_r+0x7a>
 8002c7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c7e:	b141      	cbz	r1, 8002c92 <__swsetup_r+0x6a>
 8002c80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c84:	4299      	cmp	r1, r3
 8002c86:	d002      	beq.n	8002c8e <__swsetup_r+0x66>
 8002c88:	4630      	mov	r0, r6
 8002c8a:	f000 fa5b 	bl	8003144 <_free_r>
 8002c8e:	2300      	movs	r3, #0
 8002c90:	6363      	str	r3, [r4, #52]	; 0x34
 8002c92:	89a3      	ldrh	r3, [r4, #12]
 8002c94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002c98:	81a3      	strh	r3, [r4, #12]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	6063      	str	r3, [r4, #4]
 8002c9e:	6923      	ldr	r3, [r4, #16]
 8002ca0:	6023      	str	r3, [r4, #0]
 8002ca2:	89a3      	ldrh	r3, [r4, #12]
 8002ca4:	f043 0308 	orr.w	r3, r3, #8
 8002ca8:	81a3      	strh	r3, [r4, #12]
 8002caa:	6923      	ldr	r3, [r4, #16]
 8002cac:	b94b      	cbnz	r3, 8002cc2 <__swsetup_r+0x9a>
 8002cae:	89a3      	ldrh	r3, [r4, #12]
 8002cb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cb8:	d003      	beq.n	8002cc2 <__swsetup_r+0x9a>
 8002cba:	4621      	mov	r1, r4
 8002cbc:	4630      	mov	r0, r6
 8002cbe:	f000 fa01 	bl	80030c4 <__smakebuf_r>
 8002cc2:	89a0      	ldrh	r0, [r4, #12]
 8002cc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002cc8:	f010 0301 	ands.w	r3, r0, #1
 8002ccc:	d00a      	beq.n	8002ce4 <__swsetup_r+0xbc>
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60a3      	str	r3, [r4, #8]
 8002cd2:	6963      	ldr	r3, [r4, #20]
 8002cd4:	425b      	negs	r3, r3
 8002cd6:	61a3      	str	r3, [r4, #24]
 8002cd8:	6923      	ldr	r3, [r4, #16]
 8002cda:	b943      	cbnz	r3, 8002cee <__swsetup_r+0xc6>
 8002cdc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002ce0:	d1ba      	bne.n	8002c58 <__swsetup_r+0x30>
 8002ce2:	bd70      	pop	{r4, r5, r6, pc}
 8002ce4:	0781      	lsls	r1, r0, #30
 8002ce6:	bf58      	it	pl
 8002ce8:	6963      	ldrpl	r3, [r4, #20]
 8002cea:	60a3      	str	r3, [r4, #8]
 8002cec:	e7f4      	b.n	8002cd8 <__swsetup_r+0xb0>
 8002cee:	2000      	movs	r0, #0
 8002cf0:	e7f7      	b.n	8002ce2 <__swsetup_r+0xba>
 8002cf2:	bf00      	nop
 8002cf4:	200000ac 	.word	0x200000ac
 8002cf8:	08003b80 	.word	0x08003b80
 8002cfc:	08003ba0 	.word	0x08003ba0
 8002d00:	08003b60 	.word	0x08003b60

08002d04 <__sflush_r>:
 8002d04:	898a      	ldrh	r2, [r1, #12]
 8002d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d0a:	4605      	mov	r5, r0
 8002d0c:	0710      	lsls	r0, r2, #28
 8002d0e:	460c      	mov	r4, r1
 8002d10:	d458      	bmi.n	8002dc4 <__sflush_r+0xc0>
 8002d12:	684b      	ldr	r3, [r1, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	dc05      	bgt.n	8002d24 <__sflush_r+0x20>
 8002d18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	dc02      	bgt.n	8002d24 <__sflush_r+0x20>
 8002d1e:	2000      	movs	r0, #0
 8002d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d26:	2e00      	cmp	r6, #0
 8002d28:	d0f9      	beq.n	8002d1e <__sflush_r+0x1a>
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002d30:	682f      	ldr	r7, [r5, #0]
 8002d32:	602b      	str	r3, [r5, #0]
 8002d34:	d032      	beq.n	8002d9c <__sflush_r+0x98>
 8002d36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002d38:	89a3      	ldrh	r3, [r4, #12]
 8002d3a:	075a      	lsls	r2, r3, #29
 8002d3c:	d505      	bpl.n	8002d4a <__sflush_r+0x46>
 8002d3e:	6863      	ldr	r3, [r4, #4]
 8002d40:	1ac0      	subs	r0, r0, r3
 8002d42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d44:	b10b      	cbz	r3, 8002d4a <__sflush_r+0x46>
 8002d46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d48:	1ac0      	subs	r0, r0, r3
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d50:	6a21      	ldr	r1, [r4, #32]
 8002d52:	4628      	mov	r0, r5
 8002d54:	47b0      	blx	r6
 8002d56:	1c43      	adds	r3, r0, #1
 8002d58:	89a3      	ldrh	r3, [r4, #12]
 8002d5a:	d106      	bne.n	8002d6a <__sflush_r+0x66>
 8002d5c:	6829      	ldr	r1, [r5, #0]
 8002d5e:	291d      	cmp	r1, #29
 8002d60:	d82c      	bhi.n	8002dbc <__sflush_r+0xb8>
 8002d62:	4a2a      	ldr	r2, [pc, #168]	; (8002e0c <__sflush_r+0x108>)
 8002d64:	40ca      	lsrs	r2, r1
 8002d66:	07d6      	lsls	r6, r2, #31
 8002d68:	d528      	bpl.n	8002dbc <__sflush_r+0xb8>
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	6062      	str	r2, [r4, #4]
 8002d6e:	04d9      	lsls	r1, r3, #19
 8002d70:	6922      	ldr	r2, [r4, #16]
 8002d72:	6022      	str	r2, [r4, #0]
 8002d74:	d504      	bpl.n	8002d80 <__sflush_r+0x7c>
 8002d76:	1c42      	adds	r2, r0, #1
 8002d78:	d101      	bne.n	8002d7e <__sflush_r+0x7a>
 8002d7a:	682b      	ldr	r3, [r5, #0]
 8002d7c:	b903      	cbnz	r3, 8002d80 <__sflush_r+0x7c>
 8002d7e:	6560      	str	r0, [r4, #84]	; 0x54
 8002d80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d82:	602f      	str	r7, [r5, #0]
 8002d84:	2900      	cmp	r1, #0
 8002d86:	d0ca      	beq.n	8002d1e <__sflush_r+0x1a>
 8002d88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d8c:	4299      	cmp	r1, r3
 8002d8e:	d002      	beq.n	8002d96 <__sflush_r+0x92>
 8002d90:	4628      	mov	r0, r5
 8002d92:	f000 f9d7 	bl	8003144 <_free_r>
 8002d96:	2000      	movs	r0, #0
 8002d98:	6360      	str	r0, [r4, #52]	; 0x34
 8002d9a:	e7c1      	b.n	8002d20 <__sflush_r+0x1c>
 8002d9c:	6a21      	ldr	r1, [r4, #32]
 8002d9e:	2301      	movs	r3, #1
 8002da0:	4628      	mov	r0, r5
 8002da2:	47b0      	blx	r6
 8002da4:	1c41      	adds	r1, r0, #1
 8002da6:	d1c7      	bne.n	8002d38 <__sflush_r+0x34>
 8002da8:	682b      	ldr	r3, [r5, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0c4      	beq.n	8002d38 <__sflush_r+0x34>
 8002dae:	2b1d      	cmp	r3, #29
 8002db0:	d001      	beq.n	8002db6 <__sflush_r+0xb2>
 8002db2:	2b16      	cmp	r3, #22
 8002db4:	d101      	bne.n	8002dba <__sflush_r+0xb6>
 8002db6:	602f      	str	r7, [r5, #0]
 8002db8:	e7b1      	b.n	8002d1e <__sflush_r+0x1a>
 8002dba:	89a3      	ldrh	r3, [r4, #12]
 8002dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dc0:	81a3      	strh	r3, [r4, #12]
 8002dc2:	e7ad      	b.n	8002d20 <__sflush_r+0x1c>
 8002dc4:	690f      	ldr	r7, [r1, #16]
 8002dc6:	2f00      	cmp	r7, #0
 8002dc8:	d0a9      	beq.n	8002d1e <__sflush_r+0x1a>
 8002dca:	0793      	lsls	r3, r2, #30
 8002dcc:	680e      	ldr	r6, [r1, #0]
 8002dce:	bf08      	it	eq
 8002dd0:	694b      	ldreq	r3, [r1, #20]
 8002dd2:	600f      	str	r7, [r1, #0]
 8002dd4:	bf18      	it	ne
 8002dd6:	2300      	movne	r3, #0
 8002dd8:	eba6 0807 	sub.w	r8, r6, r7
 8002ddc:	608b      	str	r3, [r1, #8]
 8002dde:	f1b8 0f00 	cmp.w	r8, #0
 8002de2:	dd9c      	ble.n	8002d1e <__sflush_r+0x1a>
 8002de4:	6a21      	ldr	r1, [r4, #32]
 8002de6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002de8:	4643      	mov	r3, r8
 8002dea:	463a      	mov	r2, r7
 8002dec:	4628      	mov	r0, r5
 8002dee:	47b0      	blx	r6
 8002df0:	2800      	cmp	r0, #0
 8002df2:	dc06      	bgt.n	8002e02 <__sflush_r+0xfe>
 8002df4:	89a3      	ldrh	r3, [r4, #12]
 8002df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dfa:	81a3      	strh	r3, [r4, #12]
 8002dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002e00:	e78e      	b.n	8002d20 <__sflush_r+0x1c>
 8002e02:	4407      	add	r7, r0
 8002e04:	eba8 0800 	sub.w	r8, r8, r0
 8002e08:	e7e9      	b.n	8002dde <__sflush_r+0xda>
 8002e0a:	bf00      	nop
 8002e0c:	20400001 	.word	0x20400001

08002e10 <_fflush_r>:
 8002e10:	b538      	push	{r3, r4, r5, lr}
 8002e12:	690b      	ldr	r3, [r1, #16]
 8002e14:	4605      	mov	r5, r0
 8002e16:	460c      	mov	r4, r1
 8002e18:	b913      	cbnz	r3, 8002e20 <_fflush_r+0x10>
 8002e1a:	2500      	movs	r5, #0
 8002e1c:	4628      	mov	r0, r5
 8002e1e:	bd38      	pop	{r3, r4, r5, pc}
 8002e20:	b118      	cbz	r0, 8002e2a <_fflush_r+0x1a>
 8002e22:	6983      	ldr	r3, [r0, #24]
 8002e24:	b90b      	cbnz	r3, 8002e2a <_fflush_r+0x1a>
 8002e26:	f000 f887 	bl	8002f38 <__sinit>
 8002e2a:	4b14      	ldr	r3, [pc, #80]	; (8002e7c <_fflush_r+0x6c>)
 8002e2c:	429c      	cmp	r4, r3
 8002e2e:	d11b      	bne.n	8002e68 <_fflush_r+0x58>
 8002e30:	686c      	ldr	r4, [r5, #4]
 8002e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0ef      	beq.n	8002e1a <_fflush_r+0xa>
 8002e3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002e3c:	07d0      	lsls	r0, r2, #31
 8002e3e:	d404      	bmi.n	8002e4a <_fflush_r+0x3a>
 8002e40:	0599      	lsls	r1, r3, #22
 8002e42:	d402      	bmi.n	8002e4a <_fflush_r+0x3a>
 8002e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e46:	f000 f915 	bl	8003074 <__retarget_lock_acquire_recursive>
 8002e4a:	4628      	mov	r0, r5
 8002e4c:	4621      	mov	r1, r4
 8002e4e:	f7ff ff59 	bl	8002d04 <__sflush_r>
 8002e52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e54:	07da      	lsls	r2, r3, #31
 8002e56:	4605      	mov	r5, r0
 8002e58:	d4e0      	bmi.n	8002e1c <_fflush_r+0xc>
 8002e5a:	89a3      	ldrh	r3, [r4, #12]
 8002e5c:	059b      	lsls	r3, r3, #22
 8002e5e:	d4dd      	bmi.n	8002e1c <_fflush_r+0xc>
 8002e60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e62:	f000 f908 	bl	8003076 <__retarget_lock_release_recursive>
 8002e66:	e7d9      	b.n	8002e1c <_fflush_r+0xc>
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <_fflush_r+0x70>)
 8002e6a:	429c      	cmp	r4, r3
 8002e6c:	d101      	bne.n	8002e72 <_fflush_r+0x62>
 8002e6e:	68ac      	ldr	r4, [r5, #8]
 8002e70:	e7df      	b.n	8002e32 <_fflush_r+0x22>
 8002e72:	4b04      	ldr	r3, [pc, #16]	; (8002e84 <_fflush_r+0x74>)
 8002e74:	429c      	cmp	r4, r3
 8002e76:	bf08      	it	eq
 8002e78:	68ec      	ldreq	r4, [r5, #12]
 8002e7a:	e7da      	b.n	8002e32 <_fflush_r+0x22>
 8002e7c:	08003b80 	.word	0x08003b80
 8002e80:	08003ba0 	.word	0x08003ba0
 8002e84:	08003b60 	.word	0x08003b60

08002e88 <std>:
 8002e88:	2300      	movs	r3, #0
 8002e8a:	b510      	push	{r4, lr}
 8002e8c:	4604      	mov	r4, r0
 8002e8e:	e9c0 3300 	strd	r3, r3, [r0]
 8002e92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002e96:	6083      	str	r3, [r0, #8]
 8002e98:	8181      	strh	r1, [r0, #12]
 8002e9a:	6643      	str	r3, [r0, #100]	; 0x64
 8002e9c:	81c2      	strh	r2, [r0, #14]
 8002e9e:	6183      	str	r3, [r0, #24]
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	2208      	movs	r2, #8
 8002ea4:	305c      	adds	r0, #92	; 0x5c
 8002ea6:	f7ff fdd7 	bl	8002a58 <memset>
 8002eaa:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <std+0x38>)
 8002eac:	6263      	str	r3, [r4, #36]	; 0x24
 8002eae:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <std+0x3c>)
 8002eb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8002eb2:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <std+0x40>)
 8002eb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002eb6:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <std+0x44>)
 8002eb8:	6224      	str	r4, [r4, #32]
 8002eba:	6323      	str	r3, [r4, #48]	; 0x30
 8002ebc:	bd10      	pop	{r4, pc}
 8002ebe:	bf00      	nop
 8002ec0:	08003901 	.word	0x08003901
 8002ec4:	08003923 	.word	0x08003923
 8002ec8:	0800395b 	.word	0x0800395b
 8002ecc:	0800397f 	.word	0x0800397f

08002ed0 <_cleanup_r>:
 8002ed0:	4901      	ldr	r1, [pc, #4]	; (8002ed8 <_cleanup_r+0x8>)
 8002ed2:	f000 b8af 	b.w	8003034 <_fwalk_reent>
 8002ed6:	bf00      	nop
 8002ed8:	08002e11 	.word	0x08002e11

08002edc <__sfmoreglue>:
 8002edc:	b570      	push	{r4, r5, r6, lr}
 8002ede:	2268      	movs	r2, #104	; 0x68
 8002ee0:	1e4d      	subs	r5, r1, #1
 8002ee2:	4355      	muls	r5, r2
 8002ee4:	460e      	mov	r6, r1
 8002ee6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002eea:	f000 f997 	bl	800321c <_malloc_r>
 8002eee:	4604      	mov	r4, r0
 8002ef0:	b140      	cbz	r0, 8002f04 <__sfmoreglue+0x28>
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	e9c0 1600 	strd	r1, r6, [r0]
 8002ef8:	300c      	adds	r0, #12
 8002efa:	60a0      	str	r0, [r4, #8]
 8002efc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002f00:	f7ff fdaa 	bl	8002a58 <memset>
 8002f04:	4620      	mov	r0, r4
 8002f06:	bd70      	pop	{r4, r5, r6, pc}

08002f08 <__sfp_lock_acquire>:
 8002f08:	4801      	ldr	r0, [pc, #4]	; (8002f10 <__sfp_lock_acquire+0x8>)
 8002f0a:	f000 b8b3 	b.w	8003074 <__retarget_lock_acquire_recursive>
 8002f0e:	bf00      	nop
 8002f10:	200001bd 	.word	0x200001bd

08002f14 <__sfp_lock_release>:
 8002f14:	4801      	ldr	r0, [pc, #4]	; (8002f1c <__sfp_lock_release+0x8>)
 8002f16:	f000 b8ae 	b.w	8003076 <__retarget_lock_release_recursive>
 8002f1a:	bf00      	nop
 8002f1c:	200001bd 	.word	0x200001bd

08002f20 <__sinit_lock_acquire>:
 8002f20:	4801      	ldr	r0, [pc, #4]	; (8002f28 <__sinit_lock_acquire+0x8>)
 8002f22:	f000 b8a7 	b.w	8003074 <__retarget_lock_acquire_recursive>
 8002f26:	bf00      	nop
 8002f28:	200001be 	.word	0x200001be

08002f2c <__sinit_lock_release>:
 8002f2c:	4801      	ldr	r0, [pc, #4]	; (8002f34 <__sinit_lock_release+0x8>)
 8002f2e:	f000 b8a2 	b.w	8003076 <__retarget_lock_release_recursive>
 8002f32:	bf00      	nop
 8002f34:	200001be 	.word	0x200001be

08002f38 <__sinit>:
 8002f38:	b510      	push	{r4, lr}
 8002f3a:	4604      	mov	r4, r0
 8002f3c:	f7ff fff0 	bl	8002f20 <__sinit_lock_acquire>
 8002f40:	69a3      	ldr	r3, [r4, #24]
 8002f42:	b11b      	cbz	r3, 8002f4c <__sinit+0x14>
 8002f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f48:	f7ff bff0 	b.w	8002f2c <__sinit_lock_release>
 8002f4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002f50:	6523      	str	r3, [r4, #80]	; 0x50
 8002f52:	4b13      	ldr	r3, [pc, #76]	; (8002fa0 <__sinit+0x68>)
 8002f54:	4a13      	ldr	r2, [pc, #76]	; (8002fa4 <__sinit+0x6c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	62a2      	str	r2, [r4, #40]	; 0x28
 8002f5a:	42a3      	cmp	r3, r4
 8002f5c:	bf04      	itt	eq
 8002f5e:	2301      	moveq	r3, #1
 8002f60:	61a3      	streq	r3, [r4, #24]
 8002f62:	4620      	mov	r0, r4
 8002f64:	f000 f820 	bl	8002fa8 <__sfp>
 8002f68:	6060      	str	r0, [r4, #4]
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	f000 f81c 	bl	8002fa8 <__sfp>
 8002f70:	60a0      	str	r0, [r4, #8]
 8002f72:	4620      	mov	r0, r4
 8002f74:	f000 f818 	bl	8002fa8 <__sfp>
 8002f78:	2200      	movs	r2, #0
 8002f7a:	60e0      	str	r0, [r4, #12]
 8002f7c:	2104      	movs	r1, #4
 8002f7e:	6860      	ldr	r0, [r4, #4]
 8002f80:	f7ff ff82 	bl	8002e88 <std>
 8002f84:	68a0      	ldr	r0, [r4, #8]
 8002f86:	2201      	movs	r2, #1
 8002f88:	2109      	movs	r1, #9
 8002f8a:	f7ff ff7d 	bl	8002e88 <std>
 8002f8e:	68e0      	ldr	r0, [r4, #12]
 8002f90:	2202      	movs	r2, #2
 8002f92:	2112      	movs	r1, #18
 8002f94:	f7ff ff78 	bl	8002e88 <std>
 8002f98:	2301      	movs	r3, #1
 8002f9a:	61a3      	str	r3, [r4, #24]
 8002f9c:	e7d2      	b.n	8002f44 <__sinit+0xc>
 8002f9e:	bf00      	nop
 8002fa0:	08003b5c 	.word	0x08003b5c
 8002fa4:	08002ed1 	.word	0x08002ed1

08002fa8 <__sfp>:
 8002fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002faa:	4607      	mov	r7, r0
 8002fac:	f7ff ffac 	bl	8002f08 <__sfp_lock_acquire>
 8002fb0:	4b1e      	ldr	r3, [pc, #120]	; (800302c <__sfp+0x84>)
 8002fb2:	681e      	ldr	r6, [r3, #0]
 8002fb4:	69b3      	ldr	r3, [r6, #24]
 8002fb6:	b913      	cbnz	r3, 8002fbe <__sfp+0x16>
 8002fb8:	4630      	mov	r0, r6
 8002fba:	f7ff ffbd 	bl	8002f38 <__sinit>
 8002fbe:	3648      	adds	r6, #72	; 0x48
 8002fc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	d503      	bpl.n	8002fd0 <__sfp+0x28>
 8002fc8:	6833      	ldr	r3, [r6, #0]
 8002fca:	b30b      	cbz	r3, 8003010 <__sfp+0x68>
 8002fcc:	6836      	ldr	r6, [r6, #0]
 8002fce:	e7f7      	b.n	8002fc0 <__sfp+0x18>
 8002fd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002fd4:	b9d5      	cbnz	r5, 800300c <__sfp+0x64>
 8002fd6:	4b16      	ldr	r3, [pc, #88]	; (8003030 <__sfp+0x88>)
 8002fd8:	60e3      	str	r3, [r4, #12]
 8002fda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002fde:	6665      	str	r5, [r4, #100]	; 0x64
 8002fe0:	f000 f847 	bl	8003072 <__retarget_lock_init_recursive>
 8002fe4:	f7ff ff96 	bl	8002f14 <__sfp_lock_release>
 8002fe8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002fec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002ff0:	6025      	str	r5, [r4, #0]
 8002ff2:	61a5      	str	r5, [r4, #24]
 8002ff4:	2208      	movs	r2, #8
 8002ff6:	4629      	mov	r1, r5
 8002ff8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002ffc:	f7ff fd2c 	bl	8002a58 <memset>
 8003000:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003004:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003008:	4620      	mov	r0, r4
 800300a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800300c:	3468      	adds	r4, #104	; 0x68
 800300e:	e7d9      	b.n	8002fc4 <__sfp+0x1c>
 8003010:	2104      	movs	r1, #4
 8003012:	4638      	mov	r0, r7
 8003014:	f7ff ff62 	bl	8002edc <__sfmoreglue>
 8003018:	4604      	mov	r4, r0
 800301a:	6030      	str	r0, [r6, #0]
 800301c:	2800      	cmp	r0, #0
 800301e:	d1d5      	bne.n	8002fcc <__sfp+0x24>
 8003020:	f7ff ff78 	bl	8002f14 <__sfp_lock_release>
 8003024:	230c      	movs	r3, #12
 8003026:	603b      	str	r3, [r7, #0]
 8003028:	e7ee      	b.n	8003008 <__sfp+0x60>
 800302a:	bf00      	nop
 800302c:	08003b5c 	.word	0x08003b5c
 8003030:	ffff0001 	.word	0xffff0001

08003034 <_fwalk_reent>:
 8003034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003038:	4606      	mov	r6, r0
 800303a:	4688      	mov	r8, r1
 800303c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003040:	2700      	movs	r7, #0
 8003042:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003046:	f1b9 0901 	subs.w	r9, r9, #1
 800304a:	d505      	bpl.n	8003058 <_fwalk_reent+0x24>
 800304c:	6824      	ldr	r4, [r4, #0]
 800304e:	2c00      	cmp	r4, #0
 8003050:	d1f7      	bne.n	8003042 <_fwalk_reent+0xe>
 8003052:	4638      	mov	r0, r7
 8003054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003058:	89ab      	ldrh	r3, [r5, #12]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d907      	bls.n	800306e <_fwalk_reent+0x3a>
 800305e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003062:	3301      	adds	r3, #1
 8003064:	d003      	beq.n	800306e <_fwalk_reent+0x3a>
 8003066:	4629      	mov	r1, r5
 8003068:	4630      	mov	r0, r6
 800306a:	47c0      	blx	r8
 800306c:	4307      	orrs	r7, r0
 800306e:	3568      	adds	r5, #104	; 0x68
 8003070:	e7e9      	b.n	8003046 <_fwalk_reent+0x12>

08003072 <__retarget_lock_init_recursive>:
 8003072:	4770      	bx	lr

08003074 <__retarget_lock_acquire_recursive>:
 8003074:	4770      	bx	lr

08003076 <__retarget_lock_release_recursive>:
 8003076:	4770      	bx	lr

08003078 <__swhatbuf_r>:
 8003078:	b570      	push	{r4, r5, r6, lr}
 800307a:	460e      	mov	r6, r1
 800307c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003080:	2900      	cmp	r1, #0
 8003082:	b096      	sub	sp, #88	; 0x58
 8003084:	4614      	mov	r4, r2
 8003086:	461d      	mov	r5, r3
 8003088:	da08      	bge.n	800309c <__swhatbuf_r+0x24>
 800308a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	602a      	str	r2, [r5, #0]
 8003092:	061a      	lsls	r2, r3, #24
 8003094:	d410      	bmi.n	80030b8 <__swhatbuf_r+0x40>
 8003096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800309a:	e00e      	b.n	80030ba <__swhatbuf_r+0x42>
 800309c:	466a      	mov	r2, sp
 800309e:	f000 fc95 	bl	80039cc <_fstat_r>
 80030a2:	2800      	cmp	r0, #0
 80030a4:	dbf1      	blt.n	800308a <__swhatbuf_r+0x12>
 80030a6:	9a01      	ldr	r2, [sp, #4]
 80030a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80030ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80030b0:	425a      	negs	r2, r3
 80030b2:	415a      	adcs	r2, r3
 80030b4:	602a      	str	r2, [r5, #0]
 80030b6:	e7ee      	b.n	8003096 <__swhatbuf_r+0x1e>
 80030b8:	2340      	movs	r3, #64	; 0x40
 80030ba:	2000      	movs	r0, #0
 80030bc:	6023      	str	r3, [r4, #0]
 80030be:	b016      	add	sp, #88	; 0x58
 80030c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080030c4 <__smakebuf_r>:
 80030c4:	898b      	ldrh	r3, [r1, #12]
 80030c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80030c8:	079d      	lsls	r5, r3, #30
 80030ca:	4606      	mov	r6, r0
 80030cc:	460c      	mov	r4, r1
 80030ce:	d507      	bpl.n	80030e0 <__smakebuf_r+0x1c>
 80030d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80030d4:	6023      	str	r3, [r4, #0]
 80030d6:	6123      	str	r3, [r4, #16]
 80030d8:	2301      	movs	r3, #1
 80030da:	6163      	str	r3, [r4, #20]
 80030dc:	b002      	add	sp, #8
 80030de:	bd70      	pop	{r4, r5, r6, pc}
 80030e0:	ab01      	add	r3, sp, #4
 80030e2:	466a      	mov	r2, sp
 80030e4:	f7ff ffc8 	bl	8003078 <__swhatbuf_r>
 80030e8:	9900      	ldr	r1, [sp, #0]
 80030ea:	4605      	mov	r5, r0
 80030ec:	4630      	mov	r0, r6
 80030ee:	f000 f895 	bl	800321c <_malloc_r>
 80030f2:	b948      	cbnz	r0, 8003108 <__smakebuf_r+0x44>
 80030f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030f8:	059a      	lsls	r2, r3, #22
 80030fa:	d4ef      	bmi.n	80030dc <__smakebuf_r+0x18>
 80030fc:	f023 0303 	bic.w	r3, r3, #3
 8003100:	f043 0302 	orr.w	r3, r3, #2
 8003104:	81a3      	strh	r3, [r4, #12]
 8003106:	e7e3      	b.n	80030d0 <__smakebuf_r+0xc>
 8003108:	4b0d      	ldr	r3, [pc, #52]	; (8003140 <__smakebuf_r+0x7c>)
 800310a:	62b3      	str	r3, [r6, #40]	; 0x28
 800310c:	89a3      	ldrh	r3, [r4, #12]
 800310e:	6020      	str	r0, [r4, #0]
 8003110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003114:	81a3      	strh	r3, [r4, #12]
 8003116:	9b00      	ldr	r3, [sp, #0]
 8003118:	6163      	str	r3, [r4, #20]
 800311a:	9b01      	ldr	r3, [sp, #4]
 800311c:	6120      	str	r0, [r4, #16]
 800311e:	b15b      	cbz	r3, 8003138 <__smakebuf_r+0x74>
 8003120:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003124:	4630      	mov	r0, r6
 8003126:	f000 fc63 	bl	80039f0 <_isatty_r>
 800312a:	b128      	cbz	r0, 8003138 <__smakebuf_r+0x74>
 800312c:	89a3      	ldrh	r3, [r4, #12]
 800312e:	f023 0303 	bic.w	r3, r3, #3
 8003132:	f043 0301 	orr.w	r3, r3, #1
 8003136:	81a3      	strh	r3, [r4, #12]
 8003138:	89a0      	ldrh	r0, [r4, #12]
 800313a:	4305      	orrs	r5, r0
 800313c:	81a5      	strh	r5, [r4, #12]
 800313e:	e7cd      	b.n	80030dc <__smakebuf_r+0x18>
 8003140:	08002ed1 	.word	0x08002ed1

08003144 <_free_r>:
 8003144:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003146:	2900      	cmp	r1, #0
 8003148:	d044      	beq.n	80031d4 <_free_r+0x90>
 800314a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800314e:	9001      	str	r0, [sp, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	f1a1 0404 	sub.w	r4, r1, #4
 8003156:	bfb8      	it	lt
 8003158:	18e4      	addlt	r4, r4, r3
 800315a:	f000 fc6b 	bl	8003a34 <__malloc_lock>
 800315e:	4a1e      	ldr	r2, [pc, #120]	; (80031d8 <_free_r+0x94>)
 8003160:	9801      	ldr	r0, [sp, #4]
 8003162:	6813      	ldr	r3, [r2, #0]
 8003164:	b933      	cbnz	r3, 8003174 <_free_r+0x30>
 8003166:	6063      	str	r3, [r4, #4]
 8003168:	6014      	str	r4, [r2, #0]
 800316a:	b003      	add	sp, #12
 800316c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003170:	f000 bc66 	b.w	8003a40 <__malloc_unlock>
 8003174:	42a3      	cmp	r3, r4
 8003176:	d908      	bls.n	800318a <_free_r+0x46>
 8003178:	6825      	ldr	r5, [r4, #0]
 800317a:	1961      	adds	r1, r4, r5
 800317c:	428b      	cmp	r3, r1
 800317e:	bf01      	itttt	eq
 8003180:	6819      	ldreq	r1, [r3, #0]
 8003182:	685b      	ldreq	r3, [r3, #4]
 8003184:	1949      	addeq	r1, r1, r5
 8003186:	6021      	streq	r1, [r4, #0]
 8003188:	e7ed      	b.n	8003166 <_free_r+0x22>
 800318a:	461a      	mov	r2, r3
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	b10b      	cbz	r3, 8003194 <_free_r+0x50>
 8003190:	42a3      	cmp	r3, r4
 8003192:	d9fa      	bls.n	800318a <_free_r+0x46>
 8003194:	6811      	ldr	r1, [r2, #0]
 8003196:	1855      	adds	r5, r2, r1
 8003198:	42a5      	cmp	r5, r4
 800319a:	d10b      	bne.n	80031b4 <_free_r+0x70>
 800319c:	6824      	ldr	r4, [r4, #0]
 800319e:	4421      	add	r1, r4
 80031a0:	1854      	adds	r4, r2, r1
 80031a2:	42a3      	cmp	r3, r4
 80031a4:	6011      	str	r1, [r2, #0]
 80031a6:	d1e0      	bne.n	800316a <_free_r+0x26>
 80031a8:	681c      	ldr	r4, [r3, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	6053      	str	r3, [r2, #4]
 80031ae:	4421      	add	r1, r4
 80031b0:	6011      	str	r1, [r2, #0]
 80031b2:	e7da      	b.n	800316a <_free_r+0x26>
 80031b4:	d902      	bls.n	80031bc <_free_r+0x78>
 80031b6:	230c      	movs	r3, #12
 80031b8:	6003      	str	r3, [r0, #0]
 80031ba:	e7d6      	b.n	800316a <_free_r+0x26>
 80031bc:	6825      	ldr	r5, [r4, #0]
 80031be:	1961      	adds	r1, r4, r5
 80031c0:	428b      	cmp	r3, r1
 80031c2:	bf04      	itt	eq
 80031c4:	6819      	ldreq	r1, [r3, #0]
 80031c6:	685b      	ldreq	r3, [r3, #4]
 80031c8:	6063      	str	r3, [r4, #4]
 80031ca:	bf04      	itt	eq
 80031cc:	1949      	addeq	r1, r1, r5
 80031ce:	6021      	streq	r1, [r4, #0]
 80031d0:	6054      	str	r4, [r2, #4]
 80031d2:	e7ca      	b.n	800316a <_free_r+0x26>
 80031d4:	b003      	add	sp, #12
 80031d6:	bd30      	pop	{r4, r5, pc}
 80031d8:	200001c0 	.word	0x200001c0

080031dc <sbrk_aligned>:
 80031dc:	b570      	push	{r4, r5, r6, lr}
 80031de:	4e0e      	ldr	r6, [pc, #56]	; (8003218 <sbrk_aligned+0x3c>)
 80031e0:	460c      	mov	r4, r1
 80031e2:	6831      	ldr	r1, [r6, #0]
 80031e4:	4605      	mov	r5, r0
 80031e6:	b911      	cbnz	r1, 80031ee <sbrk_aligned+0x12>
 80031e8:	f000 fb7a 	bl	80038e0 <_sbrk_r>
 80031ec:	6030      	str	r0, [r6, #0]
 80031ee:	4621      	mov	r1, r4
 80031f0:	4628      	mov	r0, r5
 80031f2:	f000 fb75 	bl	80038e0 <_sbrk_r>
 80031f6:	1c43      	adds	r3, r0, #1
 80031f8:	d00a      	beq.n	8003210 <sbrk_aligned+0x34>
 80031fa:	1cc4      	adds	r4, r0, #3
 80031fc:	f024 0403 	bic.w	r4, r4, #3
 8003200:	42a0      	cmp	r0, r4
 8003202:	d007      	beq.n	8003214 <sbrk_aligned+0x38>
 8003204:	1a21      	subs	r1, r4, r0
 8003206:	4628      	mov	r0, r5
 8003208:	f000 fb6a 	bl	80038e0 <_sbrk_r>
 800320c:	3001      	adds	r0, #1
 800320e:	d101      	bne.n	8003214 <sbrk_aligned+0x38>
 8003210:	f04f 34ff 	mov.w	r4, #4294967295
 8003214:	4620      	mov	r0, r4
 8003216:	bd70      	pop	{r4, r5, r6, pc}
 8003218:	200001c4 	.word	0x200001c4

0800321c <_malloc_r>:
 800321c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003220:	1ccd      	adds	r5, r1, #3
 8003222:	f025 0503 	bic.w	r5, r5, #3
 8003226:	3508      	adds	r5, #8
 8003228:	2d0c      	cmp	r5, #12
 800322a:	bf38      	it	cc
 800322c:	250c      	movcc	r5, #12
 800322e:	2d00      	cmp	r5, #0
 8003230:	4607      	mov	r7, r0
 8003232:	db01      	blt.n	8003238 <_malloc_r+0x1c>
 8003234:	42a9      	cmp	r1, r5
 8003236:	d905      	bls.n	8003244 <_malloc_r+0x28>
 8003238:	230c      	movs	r3, #12
 800323a:	603b      	str	r3, [r7, #0]
 800323c:	2600      	movs	r6, #0
 800323e:	4630      	mov	r0, r6
 8003240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003244:	4e2e      	ldr	r6, [pc, #184]	; (8003300 <_malloc_r+0xe4>)
 8003246:	f000 fbf5 	bl	8003a34 <__malloc_lock>
 800324a:	6833      	ldr	r3, [r6, #0]
 800324c:	461c      	mov	r4, r3
 800324e:	bb34      	cbnz	r4, 800329e <_malloc_r+0x82>
 8003250:	4629      	mov	r1, r5
 8003252:	4638      	mov	r0, r7
 8003254:	f7ff ffc2 	bl	80031dc <sbrk_aligned>
 8003258:	1c43      	adds	r3, r0, #1
 800325a:	4604      	mov	r4, r0
 800325c:	d14d      	bne.n	80032fa <_malloc_r+0xde>
 800325e:	6834      	ldr	r4, [r6, #0]
 8003260:	4626      	mov	r6, r4
 8003262:	2e00      	cmp	r6, #0
 8003264:	d140      	bne.n	80032e8 <_malloc_r+0xcc>
 8003266:	6823      	ldr	r3, [r4, #0]
 8003268:	4631      	mov	r1, r6
 800326a:	4638      	mov	r0, r7
 800326c:	eb04 0803 	add.w	r8, r4, r3
 8003270:	f000 fb36 	bl	80038e0 <_sbrk_r>
 8003274:	4580      	cmp	r8, r0
 8003276:	d13a      	bne.n	80032ee <_malloc_r+0xd2>
 8003278:	6821      	ldr	r1, [r4, #0]
 800327a:	3503      	adds	r5, #3
 800327c:	1a6d      	subs	r5, r5, r1
 800327e:	f025 0503 	bic.w	r5, r5, #3
 8003282:	3508      	adds	r5, #8
 8003284:	2d0c      	cmp	r5, #12
 8003286:	bf38      	it	cc
 8003288:	250c      	movcc	r5, #12
 800328a:	4629      	mov	r1, r5
 800328c:	4638      	mov	r0, r7
 800328e:	f7ff ffa5 	bl	80031dc <sbrk_aligned>
 8003292:	3001      	adds	r0, #1
 8003294:	d02b      	beq.n	80032ee <_malloc_r+0xd2>
 8003296:	6823      	ldr	r3, [r4, #0]
 8003298:	442b      	add	r3, r5
 800329a:	6023      	str	r3, [r4, #0]
 800329c:	e00e      	b.n	80032bc <_malloc_r+0xa0>
 800329e:	6822      	ldr	r2, [r4, #0]
 80032a0:	1b52      	subs	r2, r2, r5
 80032a2:	d41e      	bmi.n	80032e2 <_malloc_r+0xc6>
 80032a4:	2a0b      	cmp	r2, #11
 80032a6:	d916      	bls.n	80032d6 <_malloc_r+0xba>
 80032a8:	1961      	adds	r1, r4, r5
 80032aa:	42a3      	cmp	r3, r4
 80032ac:	6025      	str	r5, [r4, #0]
 80032ae:	bf18      	it	ne
 80032b0:	6059      	strne	r1, [r3, #4]
 80032b2:	6863      	ldr	r3, [r4, #4]
 80032b4:	bf08      	it	eq
 80032b6:	6031      	streq	r1, [r6, #0]
 80032b8:	5162      	str	r2, [r4, r5]
 80032ba:	604b      	str	r3, [r1, #4]
 80032bc:	4638      	mov	r0, r7
 80032be:	f104 060b 	add.w	r6, r4, #11
 80032c2:	f000 fbbd 	bl	8003a40 <__malloc_unlock>
 80032c6:	f026 0607 	bic.w	r6, r6, #7
 80032ca:	1d23      	adds	r3, r4, #4
 80032cc:	1af2      	subs	r2, r6, r3
 80032ce:	d0b6      	beq.n	800323e <_malloc_r+0x22>
 80032d0:	1b9b      	subs	r3, r3, r6
 80032d2:	50a3      	str	r3, [r4, r2]
 80032d4:	e7b3      	b.n	800323e <_malloc_r+0x22>
 80032d6:	6862      	ldr	r2, [r4, #4]
 80032d8:	42a3      	cmp	r3, r4
 80032da:	bf0c      	ite	eq
 80032dc:	6032      	streq	r2, [r6, #0]
 80032de:	605a      	strne	r2, [r3, #4]
 80032e0:	e7ec      	b.n	80032bc <_malloc_r+0xa0>
 80032e2:	4623      	mov	r3, r4
 80032e4:	6864      	ldr	r4, [r4, #4]
 80032e6:	e7b2      	b.n	800324e <_malloc_r+0x32>
 80032e8:	4634      	mov	r4, r6
 80032ea:	6876      	ldr	r6, [r6, #4]
 80032ec:	e7b9      	b.n	8003262 <_malloc_r+0x46>
 80032ee:	230c      	movs	r3, #12
 80032f0:	603b      	str	r3, [r7, #0]
 80032f2:	4638      	mov	r0, r7
 80032f4:	f000 fba4 	bl	8003a40 <__malloc_unlock>
 80032f8:	e7a1      	b.n	800323e <_malloc_r+0x22>
 80032fa:	6025      	str	r5, [r4, #0]
 80032fc:	e7de      	b.n	80032bc <_malloc_r+0xa0>
 80032fe:	bf00      	nop
 8003300:	200001c0 	.word	0x200001c0

08003304 <__sfputc_r>:
 8003304:	6893      	ldr	r3, [r2, #8]
 8003306:	3b01      	subs	r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	b410      	push	{r4}
 800330c:	6093      	str	r3, [r2, #8]
 800330e:	da08      	bge.n	8003322 <__sfputc_r+0x1e>
 8003310:	6994      	ldr	r4, [r2, #24]
 8003312:	42a3      	cmp	r3, r4
 8003314:	db01      	blt.n	800331a <__sfputc_r+0x16>
 8003316:	290a      	cmp	r1, #10
 8003318:	d103      	bne.n	8003322 <__sfputc_r+0x1e>
 800331a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800331e:	f7ff bc31 	b.w	8002b84 <__swbuf_r>
 8003322:	6813      	ldr	r3, [r2, #0]
 8003324:	1c58      	adds	r0, r3, #1
 8003326:	6010      	str	r0, [r2, #0]
 8003328:	7019      	strb	r1, [r3, #0]
 800332a:	4608      	mov	r0, r1
 800332c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003330:	4770      	bx	lr

08003332 <__sfputs_r>:
 8003332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003334:	4606      	mov	r6, r0
 8003336:	460f      	mov	r7, r1
 8003338:	4614      	mov	r4, r2
 800333a:	18d5      	adds	r5, r2, r3
 800333c:	42ac      	cmp	r4, r5
 800333e:	d101      	bne.n	8003344 <__sfputs_r+0x12>
 8003340:	2000      	movs	r0, #0
 8003342:	e007      	b.n	8003354 <__sfputs_r+0x22>
 8003344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003348:	463a      	mov	r2, r7
 800334a:	4630      	mov	r0, r6
 800334c:	f7ff ffda 	bl	8003304 <__sfputc_r>
 8003350:	1c43      	adds	r3, r0, #1
 8003352:	d1f3      	bne.n	800333c <__sfputs_r+0xa>
 8003354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003358 <_vfiprintf_r>:
 8003358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800335c:	460d      	mov	r5, r1
 800335e:	b09d      	sub	sp, #116	; 0x74
 8003360:	4614      	mov	r4, r2
 8003362:	4698      	mov	r8, r3
 8003364:	4606      	mov	r6, r0
 8003366:	b118      	cbz	r0, 8003370 <_vfiprintf_r+0x18>
 8003368:	6983      	ldr	r3, [r0, #24]
 800336a:	b90b      	cbnz	r3, 8003370 <_vfiprintf_r+0x18>
 800336c:	f7ff fde4 	bl	8002f38 <__sinit>
 8003370:	4b89      	ldr	r3, [pc, #548]	; (8003598 <_vfiprintf_r+0x240>)
 8003372:	429d      	cmp	r5, r3
 8003374:	d11b      	bne.n	80033ae <_vfiprintf_r+0x56>
 8003376:	6875      	ldr	r5, [r6, #4]
 8003378:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800337a:	07d9      	lsls	r1, r3, #31
 800337c:	d405      	bmi.n	800338a <_vfiprintf_r+0x32>
 800337e:	89ab      	ldrh	r3, [r5, #12]
 8003380:	059a      	lsls	r2, r3, #22
 8003382:	d402      	bmi.n	800338a <_vfiprintf_r+0x32>
 8003384:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003386:	f7ff fe75 	bl	8003074 <__retarget_lock_acquire_recursive>
 800338a:	89ab      	ldrh	r3, [r5, #12]
 800338c:	071b      	lsls	r3, r3, #28
 800338e:	d501      	bpl.n	8003394 <_vfiprintf_r+0x3c>
 8003390:	692b      	ldr	r3, [r5, #16]
 8003392:	b9eb      	cbnz	r3, 80033d0 <_vfiprintf_r+0x78>
 8003394:	4629      	mov	r1, r5
 8003396:	4630      	mov	r0, r6
 8003398:	f7ff fc46 	bl	8002c28 <__swsetup_r>
 800339c:	b1c0      	cbz	r0, 80033d0 <_vfiprintf_r+0x78>
 800339e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80033a0:	07dc      	lsls	r4, r3, #31
 80033a2:	d50e      	bpl.n	80033c2 <_vfiprintf_r+0x6a>
 80033a4:	f04f 30ff 	mov.w	r0, #4294967295
 80033a8:	b01d      	add	sp, #116	; 0x74
 80033aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033ae:	4b7b      	ldr	r3, [pc, #492]	; (800359c <_vfiprintf_r+0x244>)
 80033b0:	429d      	cmp	r5, r3
 80033b2:	d101      	bne.n	80033b8 <_vfiprintf_r+0x60>
 80033b4:	68b5      	ldr	r5, [r6, #8]
 80033b6:	e7df      	b.n	8003378 <_vfiprintf_r+0x20>
 80033b8:	4b79      	ldr	r3, [pc, #484]	; (80035a0 <_vfiprintf_r+0x248>)
 80033ba:	429d      	cmp	r5, r3
 80033bc:	bf08      	it	eq
 80033be:	68f5      	ldreq	r5, [r6, #12]
 80033c0:	e7da      	b.n	8003378 <_vfiprintf_r+0x20>
 80033c2:	89ab      	ldrh	r3, [r5, #12]
 80033c4:	0598      	lsls	r0, r3, #22
 80033c6:	d4ed      	bmi.n	80033a4 <_vfiprintf_r+0x4c>
 80033c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80033ca:	f7ff fe54 	bl	8003076 <__retarget_lock_release_recursive>
 80033ce:	e7e9      	b.n	80033a4 <_vfiprintf_r+0x4c>
 80033d0:	2300      	movs	r3, #0
 80033d2:	9309      	str	r3, [sp, #36]	; 0x24
 80033d4:	2320      	movs	r3, #32
 80033d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033da:	f8cd 800c 	str.w	r8, [sp, #12]
 80033de:	2330      	movs	r3, #48	; 0x30
 80033e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80035a4 <_vfiprintf_r+0x24c>
 80033e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033e8:	f04f 0901 	mov.w	r9, #1
 80033ec:	4623      	mov	r3, r4
 80033ee:	469a      	mov	sl, r3
 80033f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033f4:	b10a      	cbz	r2, 80033fa <_vfiprintf_r+0xa2>
 80033f6:	2a25      	cmp	r2, #37	; 0x25
 80033f8:	d1f9      	bne.n	80033ee <_vfiprintf_r+0x96>
 80033fa:	ebba 0b04 	subs.w	fp, sl, r4
 80033fe:	d00b      	beq.n	8003418 <_vfiprintf_r+0xc0>
 8003400:	465b      	mov	r3, fp
 8003402:	4622      	mov	r2, r4
 8003404:	4629      	mov	r1, r5
 8003406:	4630      	mov	r0, r6
 8003408:	f7ff ff93 	bl	8003332 <__sfputs_r>
 800340c:	3001      	adds	r0, #1
 800340e:	f000 80aa 	beq.w	8003566 <_vfiprintf_r+0x20e>
 8003412:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003414:	445a      	add	r2, fp
 8003416:	9209      	str	r2, [sp, #36]	; 0x24
 8003418:	f89a 3000 	ldrb.w	r3, [sl]
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80a2 	beq.w	8003566 <_vfiprintf_r+0x20e>
 8003422:	2300      	movs	r3, #0
 8003424:	f04f 32ff 	mov.w	r2, #4294967295
 8003428:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800342c:	f10a 0a01 	add.w	sl, sl, #1
 8003430:	9304      	str	r3, [sp, #16]
 8003432:	9307      	str	r3, [sp, #28]
 8003434:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003438:	931a      	str	r3, [sp, #104]	; 0x68
 800343a:	4654      	mov	r4, sl
 800343c:	2205      	movs	r2, #5
 800343e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003442:	4858      	ldr	r0, [pc, #352]	; (80035a4 <_vfiprintf_r+0x24c>)
 8003444:	f7fc fecc 	bl	80001e0 <memchr>
 8003448:	9a04      	ldr	r2, [sp, #16]
 800344a:	b9d8      	cbnz	r0, 8003484 <_vfiprintf_r+0x12c>
 800344c:	06d1      	lsls	r1, r2, #27
 800344e:	bf44      	itt	mi
 8003450:	2320      	movmi	r3, #32
 8003452:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003456:	0713      	lsls	r3, r2, #28
 8003458:	bf44      	itt	mi
 800345a:	232b      	movmi	r3, #43	; 0x2b
 800345c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003460:	f89a 3000 	ldrb.w	r3, [sl]
 8003464:	2b2a      	cmp	r3, #42	; 0x2a
 8003466:	d015      	beq.n	8003494 <_vfiprintf_r+0x13c>
 8003468:	9a07      	ldr	r2, [sp, #28]
 800346a:	4654      	mov	r4, sl
 800346c:	2000      	movs	r0, #0
 800346e:	f04f 0c0a 	mov.w	ip, #10
 8003472:	4621      	mov	r1, r4
 8003474:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003478:	3b30      	subs	r3, #48	; 0x30
 800347a:	2b09      	cmp	r3, #9
 800347c:	d94e      	bls.n	800351c <_vfiprintf_r+0x1c4>
 800347e:	b1b0      	cbz	r0, 80034ae <_vfiprintf_r+0x156>
 8003480:	9207      	str	r2, [sp, #28]
 8003482:	e014      	b.n	80034ae <_vfiprintf_r+0x156>
 8003484:	eba0 0308 	sub.w	r3, r0, r8
 8003488:	fa09 f303 	lsl.w	r3, r9, r3
 800348c:	4313      	orrs	r3, r2
 800348e:	9304      	str	r3, [sp, #16]
 8003490:	46a2      	mov	sl, r4
 8003492:	e7d2      	b.n	800343a <_vfiprintf_r+0xe2>
 8003494:	9b03      	ldr	r3, [sp, #12]
 8003496:	1d19      	adds	r1, r3, #4
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	9103      	str	r1, [sp, #12]
 800349c:	2b00      	cmp	r3, #0
 800349e:	bfbb      	ittet	lt
 80034a0:	425b      	neglt	r3, r3
 80034a2:	f042 0202 	orrlt.w	r2, r2, #2
 80034a6:	9307      	strge	r3, [sp, #28]
 80034a8:	9307      	strlt	r3, [sp, #28]
 80034aa:	bfb8      	it	lt
 80034ac:	9204      	strlt	r2, [sp, #16]
 80034ae:	7823      	ldrb	r3, [r4, #0]
 80034b0:	2b2e      	cmp	r3, #46	; 0x2e
 80034b2:	d10c      	bne.n	80034ce <_vfiprintf_r+0x176>
 80034b4:	7863      	ldrb	r3, [r4, #1]
 80034b6:	2b2a      	cmp	r3, #42	; 0x2a
 80034b8:	d135      	bne.n	8003526 <_vfiprintf_r+0x1ce>
 80034ba:	9b03      	ldr	r3, [sp, #12]
 80034bc:	1d1a      	adds	r2, r3, #4
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	9203      	str	r2, [sp, #12]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	bfb8      	it	lt
 80034c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80034ca:	3402      	adds	r4, #2
 80034cc:	9305      	str	r3, [sp, #20]
 80034ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80035b4 <_vfiprintf_r+0x25c>
 80034d2:	7821      	ldrb	r1, [r4, #0]
 80034d4:	2203      	movs	r2, #3
 80034d6:	4650      	mov	r0, sl
 80034d8:	f7fc fe82 	bl	80001e0 <memchr>
 80034dc:	b140      	cbz	r0, 80034f0 <_vfiprintf_r+0x198>
 80034de:	2340      	movs	r3, #64	; 0x40
 80034e0:	eba0 000a 	sub.w	r0, r0, sl
 80034e4:	fa03 f000 	lsl.w	r0, r3, r0
 80034e8:	9b04      	ldr	r3, [sp, #16]
 80034ea:	4303      	orrs	r3, r0
 80034ec:	3401      	adds	r4, #1
 80034ee:	9304      	str	r3, [sp, #16]
 80034f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034f4:	482c      	ldr	r0, [pc, #176]	; (80035a8 <_vfiprintf_r+0x250>)
 80034f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034fa:	2206      	movs	r2, #6
 80034fc:	f7fc fe70 	bl	80001e0 <memchr>
 8003500:	2800      	cmp	r0, #0
 8003502:	d03f      	beq.n	8003584 <_vfiprintf_r+0x22c>
 8003504:	4b29      	ldr	r3, [pc, #164]	; (80035ac <_vfiprintf_r+0x254>)
 8003506:	bb1b      	cbnz	r3, 8003550 <_vfiprintf_r+0x1f8>
 8003508:	9b03      	ldr	r3, [sp, #12]
 800350a:	3307      	adds	r3, #7
 800350c:	f023 0307 	bic.w	r3, r3, #7
 8003510:	3308      	adds	r3, #8
 8003512:	9303      	str	r3, [sp, #12]
 8003514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003516:	443b      	add	r3, r7
 8003518:	9309      	str	r3, [sp, #36]	; 0x24
 800351a:	e767      	b.n	80033ec <_vfiprintf_r+0x94>
 800351c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003520:	460c      	mov	r4, r1
 8003522:	2001      	movs	r0, #1
 8003524:	e7a5      	b.n	8003472 <_vfiprintf_r+0x11a>
 8003526:	2300      	movs	r3, #0
 8003528:	3401      	adds	r4, #1
 800352a:	9305      	str	r3, [sp, #20]
 800352c:	4619      	mov	r1, r3
 800352e:	f04f 0c0a 	mov.w	ip, #10
 8003532:	4620      	mov	r0, r4
 8003534:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003538:	3a30      	subs	r2, #48	; 0x30
 800353a:	2a09      	cmp	r2, #9
 800353c:	d903      	bls.n	8003546 <_vfiprintf_r+0x1ee>
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0c5      	beq.n	80034ce <_vfiprintf_r+0x176>
 8003542:	9105      	str	r1, [sp, #20]
 8003544:	e7c3      	b.n	80034ce <_vfiprintf_r+0x176>
 8003546:	fb0c 2101 	mla	r1, ip, r1, r2
 800354a:	4604      	mov	r4, r0
 800354c:	2301      	movs	r3, #1
 800354e:	e7f0      	b.n	8003532 <_vfiprintf_r+0x1da>
 8003550:	ab03      	add	r3, sp, #12
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	462a      	mov	r2, r5
 8003556:	4b16      	ldr	r3, [pc, #88]	; (80035b0 <_vfiprintf_r+0x258>)
 8003558:	a904      	add	r1, sp, #16
 800355a:	4630      	mov	r0, r6
 800355c:	f3af 8000 	nop.w
 8003560:	4607      	mov	r7, r0
 8003562:	1c78      	adds	r0, r7, #1
 8003564:	d1d6      	bne.n	8003514 <_vfiprintf_r+0x1bc>
 8003566:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003568:	07d9      	lsls	r1, r3, #31
 800356a:	d405      	bmi.n	8003578 <_vfiprintf_r+0x220>
 800356c:	89ab      	ldrh	r3, [r5, #12]
 800356e:	059a      	lsls	r2, r3, #22
 8003570:	d402      	bmi.n	8003578 <_vfiprintf_r+0x220>
 8003572:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003574:	f7ff fd7f 	bl	8003076 <__retarget_lock_release_recursive>
 8003578:	89ab      	ldrh	r3, [r5, #12]
 800357a:	065b      	lsls	r3, r3, #25
 800357c:	f53f af12 	bmi.w	80033a4 <_vfiprintf_r+0x4c>
 8003580:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003582:	e711      	b.n	80033a8 <_vfiprintf_r+0x50>
 8003584:	ab03      	add	r3, sp, #12
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	462a      	mov	r2, r5
 800358a:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <_vfiprintf_r+0x258>)
 800358c:	a904      	add	r1, sp, #16
 800358e:	4630      	mov	r0, r6
 8003590:	f000 f880 	bl	8003694 <_printf_i>
 8003594:	e7e4      	b.n	8003560 <_vfiprintf_r+0x208>
 8003596:	bf00      	nop
 8003598:	08003b80 	.word	0x08003b80
 800359c:	08003ba0 	.word	0x08003ba0
 80035a0:	08003b60 	.word	0x08003b60
 80035a4:	08003bc0 	.word	0x08003bc0
 80035a8:	08003bca 	.word	0x08003bca
 80035ac:	00000000 	.word	0x00000000
 80035b0:	08003333 	.word	0x08003333
 80035b4:	08003bc6 	.word	0x08003bc6

080035b8 <_printf_common>:
 80035b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035bc:	4616      	mov	r6, r2
 80035be:	4699      	mov	r9, r3
 80035c0:	688a      	ldr	r2, [r1, #8]
 80035c2:	690b      	ldr	r3, [r1, #16]
 80035c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035c8:	4293      	cmp	r3, r2
 80035ca:	bfb8      	it	lt
 80035cc:	4613      	movlt	r3, r2
 80035ce:	6033      	str	r3, [r6, #0]
 80035d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035d4:	4607      	mov	r7, r0
 80035d6:	460c      	mov	r4, r1
 80035d8:	b10a      	cbz	r2, 80035de <_printf_common+0x26>
 80035da:	3301      	adds	r3, #1
 80035dc:	6033      	str	r3, [r6, #0]
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	0699      	lsls	r1, r3, #26
 80035e2:	bf42      	ittt	mi
 80035e4:	6833      	ldrmi	r3, [r6, #0]
 80035e6:	3302      	addmi	r3, #2
 80035e8:	6033      	strmi	r3, [r6, #0]
 80035ea:	6825      	ldr	r5, [r4, #0]
 80035ec:	f015 0506 	ands.w	r5, r5, #6
 80035f0:	d106      	bne.n	8003600 <_printf_common+0x48>
 80035f2:	f104 0a19 	add.w	sl, r4, #25
 80035f6:	68e3      	ldr	r3, [r4, #12]
 80035f8:	6832      	ldr	r2, [r6, #0]
 80035fa:	1a9b      	subs	r3, r3, r2
 80035fc:	42ab      	cmp	r3, r5
 80035fe:	dc26      	bgt.n	800364e <_printf_common+0x96>
 8003600:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003604:	1e13      	subs	r3, r2, #0
 8003606:	6822      	ldr	r2, [r4, #0]
 8003608:	bf18      	it	ne
 800360a:	2301      	movne	r3, #1
 800360c:	0692      	lsls	r2, r2, #26
 800360e:	d42b      	bmi.n	8003668 <_printf_common+0xb0>
 8003610:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003614:	4649      	mov	r1, r9
 8003616:	4638      	mov	r0, r7
 8003618:	47c0      	blx	r8
 800361a:	3001      	adds	r0, #1
 800361c:	d01e      	beq.n	800365c <_printf_common+0xa4>
 800361e:	6823      	ldr	r3, [r4, #0]
 8003620:	68e5      	ldr	r5, [r4, #12]
 8003622:	6832      	ldr	r2, [r6, #0]
 8003624:	f003 0306 	and.w	r3, r3, #6
 8003628:	2b04      	cmp	r3, #4
 800362a:	bf08      	it	eq
 800362c:	1aad      	subeq	r5, r5, r2
 800362e:	68a3      	ldr	r3, [r4, #8]
 8003630:	6922      	ldr	r2, [r4, #16]
 8003632:	bf0c      	ite	eq
 8003634:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003638:	2500      	movne	r5, #0
 800363a:	4293      	cmp	r3, r2
 800363c:	bfc4      	itt	gt
 800363e:	1a9b      	subgt	r3, r3, r2
 8003640:	18ed      	addgt	r5, r5, r3
 8003642:	2600      	movs	r6, #0
 8003644:	341a      	adds	r4, #26
 8003646:	42b5      	cmp	r5, r6
 8003648:	d11a      	bne.n	8003680 <_printf_common+0xc8>
 800364a:	2000      	movs	r0, #0
 800364c:	e008      	b.n	8003660 <_printf_common+0xa8>
 800364e:	2301      	movs	r3, #1
 8003650:	4652      	mov	r2, sl
 8003652:	4649      	mov	r1, r9
 8003654:	4638      	mov	r0, r7
 8003656:	47c0      	blx	r8
 8003658:	3001      	adds	r0, #1
 800365a:	d103      	bne.n	8003664 <_printf_common+0xac>
 800365c:	f04f 30ff 	mov.w	r0, #4294967295
 8003660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003664:	3501      	adds	r5, #1
 8003666:	e7c6      	b.n	80035f6 <_printf_common+0x3e>
 8003668:	18e1      	adds	r1, r4, r3
 800366a:	1c5a      	adds	r2, r3, #1
 800366c:	2030      	movs	r0, #48	; 0x30
 800366e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003672:	4422      	add	r2, r4
 8003674:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003678:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800367c:	3302      	adds	r3, #2
 800367e:	e7c7      	b.n	8003610 <_printf_common+0x58>
 8003680:	2301      	movs	r3, #1
 8003682:	4622      	mov	r2, r4
 8003684:	4649      	mov	r1, r9
 8003686:	4638      	mov	r0, r7
 8003688:	47c0      	blx	r8
 800368a:	3001      	adds	r0, #1
 800368c:	d0e6      	beq.n	800365c <_printf_common+0xa4>
 800368e:	3601      	adds	r6, #1
 8003690:	e7d9      	b.n	8003646 <_printf_common+0x8e>
	...

08003694 <_printf_i>:
 8003694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003698:	7e0f      	ldrb	r7, [r1, #24]
 800369a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800369c:	2f78      	cmp	r7, #120	; 0x78
 800369e:	4691      	mov	r9, r2
 80036a0:	4680      	mov	r8, r0
 80036a2:	460c      	mov	r4, r1
 80036a4:	469a      	mov	sl, r3
 80036a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80036aa:	d807      	bhi.n	80036bc <_printf_i+0x28>
 80036ac:	2f62      	cmp	r7, #98	; 0x62
 80036ae:	d80a      	bhi.n	80036c6 <_printf_i+0x32>
 80036b0:	2f00      	cmp	r7, #0
 80036b2:	f000 80d8 	beq.w	8003866 <_printf_i+0x1d2>
 80036b6:	2f58      	cmp	r7, #88	; 0x58
 80036b8:	f000 80a3 	beq.w	8003802 <_printf_i+0x16e>
 80036bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036c4:	e03a      	b.n	800373c <_printf_i+0xa8>
 80036c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036ca:	2b15      	cmp	r3, #21
 80036cc:	d8f6      	bhi.n	80036bc <_printf_i+0x28>
 80036ce:	a101      	add	r1, pc, #4	; (adr r1, 80036d4 <_printf_i+0x40>)
 80036d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80036d4:	0800372d 	.word	0x0800372d
 80036d8:	08003741 	.word	0x08003741
 80036dc:	080036bd 	.word	0x080036bd
 80036e0:	080036bd 	.word	0x080036bd
 80036e4:	080036bd 	.word	0x080036bd
 80036e8:	080036bd 	.word	0x080036bd
 80036ec:	08003741 	.word	0x08003741
 80036f0:	080036bd 	.word	0x080036bd
 80036f4:	080036bd 	.word	0x080036bd
 80036f8:	080036bd 	.word	0x080036bd
 80036fc:	080036bd 	.word	0x080036bd
 8003700:	0800384d 	.word	0x0800384d
 8003704:	08003771 	.word	0x08003771
 8003708:	0800382f 	.word	0x0800382f
 800370c:	080036bd 	.word	0x080036bd
 8003710:	080036bd 	.word	0x080036bd
 8003714:	0800386f 	.word	0x0800386f
 8003718:	080036bd 	.word	0x080036bd
 800371c:	08003771 	.word	0x08003771
 8003720:	080036bd 	.word	0x080036bd
 8003724:	080036bd 	.word	0x080036bd
 8003728:	08003837 	.word	0x08003837
 800372c:	682b      	ldr	r3, [r5, #0]
 800372e:	1d1a      	adds	r2, r3, #4
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	602a      	str	r2, [r5, #0]
 8003734:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003738:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800373c:	2301      	movs	r3, #1
 800373e:	e0a3      	b.n	8003888 <_printf_i+0x1f4>
 8003740:	6820      	ldr	r0, [r4, #0]
 8003742:	6829      	ldr	r1, [r5, #0]
 8003744:	0606      	lsls	r6, r0, #24
 8003746:	f101 0304 	add.w	r3, r1, #4
 800374a:	d50a      	bpl.n	8003762 <_printf_i+0xce>
 800374c:	680e      	ldr	r6, [r1, #0]
 800374e:	602b      	str	r3, [r5, #0]
 8003750:	2e00      	cmp	r6, #0
 8003752:	da03      	bge.n	800375c <_printf_i+0xc8>
 8003754:	232d      	movs	r3, #45	; 0x2d
 8003756:	4276      	negs	r6, r6
 8003758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800375c:	485e      	ldr	r0, [pc, #376]	; (80038d8 <_printf_i+0x244>)
 800375e:	230a      	movs	r3, #10
 8003760:	e019      	b.n	8003796 <_printf_i+0x102>
 8003762:	680e      	ldr	r6, [r1, #0]
 8003764:	602b      	str	r3, [r5, #0]
 8003766:	f010 0f40 	tst.w	r0, #64	; 0x40
 800376a:	bf18      	it	ne
 800376c:	b236      	sxthne	r6, r6
 800376e:	e7ef      	b.n	8003750 <_printf_i+0xbc>
 8003770:	682b      	ldr	r3, [r5, #0]
 8003772:	6820      	ldr	r0, [r4, #0]
 8003774:	1d19      	adds	r1, r3, #4
 8003776:	6029      	str	r1, [r5, #0]
 8003778:	0601      	lsls	r1, r0, #24
 800377a:	d501      	bpl.n	8003780 <_printf_i+0xec>
 800377c:	681e      	ldr	r6, [r3, #0]
 800377e:	e002      	b.n	8003786 <_printf_i+0xf2>
 8003780:	0646      	lsls	r6, r0, #25
 8003782:	d5fb      	bpl.n	800377c <_printf_i+0xe8>
 8003784:	881e      	ldrh	r6, [r3, #0]
 8003786:	4854      	ldr	r0, [pc, #336]	; (80038d8 <_printf_i+0x244>)
 8003788:	2f6f      	cmp	r7, #111	; 0x6f
 800378a:	bf0c      	ite	eq
 800378c:	2308      	moveq	r3, #8
 800378e:	230a      	movne	r3, #10
 8003790:	2100      	movs	r1, #0
 8003792:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003796:	6865      	ldr	r5, [r4, #4]
 8003798:	60a5      	str	r5, [r4, #8]
 800379a:	2d00      	cmp	r5, #0
 800379c:	bfa2      	ittt	ge
 800379e:	6821      	ldrge	r1, [r4, #0]
 80037a0:	f021 0104 	bicge.w	r1, r1, #4
 80037a4:	6021      	strge	r1, [r4, #0]
 80037a6:	b90e      	cbnz	r6, 80037ac <_printf_i+0x118>
 80037a8:	2d00      	cmp	r5, #0
 80037aa:	d04d      	beq.n	8003848 <_printf_i+0x1b4>
 80037ac:	4615      	mov	r5, r2
 80037ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80037b2:	fb03 6711 	mls	r7, r3, r1, r6
 80037b6:	5dc7      	ldrb	r7, [r0, r7]
 80037b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80037bc:	4637      	mov	r7, r6
 80037be:	42bb      	cmp	r3, r7
 80037c0:	460e      	mov	r6, r1
 80037c2:	d9f4      	bls.n	80037ae <_printf_i+0x11a>
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d10b      	bne.n	80037e0 <_printf_i+0x14c>
 80037c8:	6823      	ldr	r3, [r4, #0]
 80037ca:	07de      	lsls	r6, r3, #31
 80037cc:	d508      	bpl.n	80037e0 <_printf_i+0x14c>
 80037ce:	6923      	ldr	r3, [r4, #16]
 80037d0:	6861      	ldr	r1, [r4, #4]
 80037d2:	4299      	cmp	r1, r3
 80037d4:	bfde      	ittt	le
 80037d6:	2330      	movle	r3, #48	; 0x30
 80037d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80037dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80037e0:	1b52      	subs	r2, r2, r5
 80037e2:	6122      	str	r2, [r4, #16]
 80037e4:	f8cd a000 	str.w	sl, [sp]
 80037e8:	464b      	mov	r3, r9
 80037ea:	aa03      	add	r2, sp, #12
 80037ec:	4621      	mov	r1, r4
 80037ee:	4640      	mov	r0, r8
 80037f0:	f7ff fee2 	bl	80035b8 <_printf_common>
 80037f4:	3001      	adds	r0, #1
 80037f6:	d14c      	bne.n	8003892 <_printf_i+0x1fe>
 80037f8:	f04f 30ff 	mov.w	r0, #4294967295
 80037fc:	b004      	add	sp, #16
 80037fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003802:	4835      	ldr	r0, [pc, #212]	; (80038d8 <_printf_i+0x244>)
 8003804:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003808:	6829      	ldr	r1, [r5, #0]
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003810:	6029      	str	r1, [r5, #0]
 8003812:	061d      	lsls	r5, r3, #24
 8003814:	d514      	bpl.n	8003840 <_printf_i+0x1ac>
 8003816:	07df      	lsls	r7, r3, #31
 8003818:	bf44      	itt	mi
 800381a:	f043 0320 	orrmi.w	r3, r3, #32
 800381e:	6023      	strmi	r3, [r4, #0]
 8003820:	b91e      	cbnz	r6, 800382a <_printf_i+0x196>
 8003822:	6823      	ldr	r3, [r4, #0]
 8003824:	f023 0320 	bic.w	r3, r3, #32
 8003828:	6023      	str	r3, [r4, #0]
 800382a:	2310      	movs	r3, #16
 800382c:	e7b0      	b.n	8003790 <_printf_i+0xfc>
 800382e:	6823      	ldr	r3, [r4, #0]
 8003830:	f043 0320 	orr.w	r3, r3, #32
 8003834:	6023      	str	r3, [r4, #0]
 8003836:	2378      	movs	r3, #120	; 0x78
 8003838:	4828      	ldr	r0, [pc, #160]	; (80038dc <_printf_i+0x248>)
 800383a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800383e:	e7e3      	b.n	8003808 <_printf_i+0x174>
 8003840:	0659      	lsls	r1, r3, #25
 8003842:	bf48      	it	mi
 8003844:	b2b6      	uxthmi	r6, r6
 8003846:	e7e6      	b.n	8003816 <_printf_i+0x182>
 8003848:	4615      	mov	r5, r2
 800384a:	e7bb      	b.n	80037c4 <_printf_i+0x130>
 800384c:	682b      	ldr	r3, [r5, #0]
 800384e:	6826      	ldr	r6, [r4, #0]
 8003850:	6961      	ldr	r1, [r4, #20]
 8003852:	1d18      	adds	r0, r3, #4
 8003854:	6028      	str	r0, [r5, #0]
 8003856:	0635      	lsls	r5, r6, #24
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	d501      	bpl.n	8003860 <_printf_i+0x1cc>
 800385c:	6019      	str	r1, [r3, #0]
 800385e:	e002      	b.n	8003866 <_printf_i+0x1d2>
 8003860:	0670      	lsls	r0, r6, #25
 8003862:	d5fb      	bpl.n	800385c <_printf_i+0x1c8>
 8003864:	8019      	strh	r1, [r3, #0]
 8003866:	2300      	movs	r3, #0
 8003868:	6123      	str	r3, [r4, #16]
 800386a:	4615      	mov	r5, r2
 800386c:	e7ba      	b.n	80037e4 <_printf_i+0x150>
 800386e:	682b      	ldr	r3, [r5, #0]
 8003870:	1d1a      	adds	r2, r3, #4
 8003872:	602a      	str	r2, [r5, #0]
 8003874:	681d      	ldr	r5, [r3, #0]
 8003876:	6862      	ldr	r2, [r4, #4]
 8003878:	2100      	movs	r1, #0
 800387a:	4628      	mov	r0, r5
 800387c:	f7fc fcb0 	bl	80001e0 <memchr>
 8003880:	b108      	cbz	r0, 8003886 <_printf_i+0x1f2>
 8003882:	1b40      	subs	r0, r0, r5
 8003884:	6060      	str	r0, [r4, #4]
 8003886:	6863      	ldr	r3, [r4, #4]
 8003888:	6123      	str	r3, [r4, #16]
 800388a:	2300      	movs	r3, #0
 800388c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003890:	e7a8      	b.n	80037e4 <_printf_i+0x150>
 8003892:	6923      	ldr	r3, [r4, #16]
 8003894:	462a      	mov	r2, r5
 8003896:	4649      	mov	r1, r9
 8003898:	4640      	mov	r0, r8
 800389a:	47d0      	blx	sl
 800389c:	3001      	adds	r0, #1
 800389e:	d0ab      	beq.n	80037f8 <_printf_i+0x164>
 80038a0:	6823      	ldr	r3, [r4, #0]
 80038a2:	079b      	lsls	r3, r3, #30
 80038a4:	d413      	bmi.n	80038ce <_printf_i+0x23a>
 80038a6:	68e0      	ldr	r0, [r4, #12]
 80038a8:	9b03      	ldr	r3, [sp, #12]
 80038aa:	4298      	cmp	r0, r3
 80038ac:	bfb8      	it	lt
 80038ae:	4618      	movlt	r0, r3
 80038b0:	e7a4      	b.n	80037fc <_printf_i+0x168>
 80038b2:	2301      	movs	r3, #1
 80038b4:	4632      	mov	r2, r6
 80038b6:	4649      	mov	r1, r9
 80038b8:	4640      	mov	r0, r8
 80038ba:	47d0      	blx	sl
 80038bc:	3001      	adds	r0, #1
 80038be:	d09b      	beq.n	80037f8 <_printf_i+0x164>
 80038c0:	3501      	adds	r5, #1
 80038c2:	68e3      	ldr	r3, [r4, #12]
 80038c4:	9903      	ldr	r1, [sp, #12]
 80038c6:	1a5b      	subs	r3, r3, r1
 80038c8:	42ab      	cmp	r3, r5
 80038ca:	dcf2      	bgt.n	80038b2 <_printf_i+0x21e>
 80038cc:	e7eb      	b.n	80038a6 <_printf_i+0x212>
 80038ce:	2500      	movs	r5, #0
 80038d0:	f104 0619 	add.w	r6, r4, #25
 80038d4:	e7f5      	b.n	80038c2 <_printf_i+0x22e>
 80038d6:	bf00      	nop
 80038d8:	08003bd1 	.word	0x08003bd1
 80038dc:	08003be2 	.word	0x08003be2

080038e0 <_sbrk_r>:
 80038e0:	b538      	push	{r3, r4, r5, lr}
 80038e2:	4d06      	ldr	r5, [pc, #24]	; (80038fc <_sbrk_r+0x1c>)
 80038e4:	2300      	movs	r3, #0
 80038e6:	4604      	mov	r4, r0
 80038e8:	4608      	mov	r0, r1
 80038ea:	602b      	str	r3, [r5, #0]
 80038ec:	f7fd fc5c 	bl	80011a8 <_sbrk>
 80038f0:	1c43      	adds	r3, r0, #1
 80038f2:	d102      	bne.n	80038fa <_sbrk_r+0x1a>
 80038f4:	682b      	ldr	r3, [r5, #0]
 80038f6:	b103      	cbz	r3, 80038fa <_sbrk_r+0x1a>
 80038f8:	6023      	str	r3, [r4, #0]
 80038fa:	bd38      	pop	{r3, r4, r5, pc}
 80038fc:	200001c8 	.word	0x200001c8

08003900 <__sread>:
 8003900:	b510      	push	{r4, lr}
 8003902:	460c      	mov	r4, r1
 8003904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003908:	f000 f8a0 	bl	8003a4c <_read_r>
 800390c:	2800      	cmp	r0, #0
 800390e:	bfab      	itete	ge
 8003910:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003912:	89a3      	ldrhlt	r3, [r4, #12]
 8003914:	181b      	addge	r3, r3, r0
 8003916:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800391a:	bfac      	ite	ge
 800391c:	6563      	strge	r3, [r4, #84]	; 0x54
 800391e:	81a3      	strhlt	r3, [r4, #12]
 8003920:	bd10      	pop	{r4, pc}

08003922 <__swrite>:
 8003922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003926:	461f      	mov	r7, r3
 8003928:	898b      	ldrh	r3, [r1, #12]
 800392a:	05db      	lsls	r3, r3, #23
 800392c:	4605      	mov	r5, r0
 800392e:	460c      	mov	r4, r1
 8003930:	4616      	mov	r6, r2
 8003932:	d505      	bpl.n	8003940 <__swrite+0x1e>
 8003934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003938:	2302      	movs	r3, #2
 800393a:	2200      	movs	r2, #0
 800393c:	f000 f868 	bl	8003a10 <_lseek_r>
 8003940:	89a3      	ldrh	r3, [r4, #12]
 8003942:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003946:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800394a:	81a3      	strh	r3, [r4, #12]
 800394c:	4632      	mov	r2, r6
 800394e:	463b      	mov	r3, r7
 8003950:	4628      	mov	r0, r5
 8003952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003956:	f000 b817 	b.w	8003988 <_write_r>

0800395a <__sseek>:
 800395a:	b510      	push	{r4, lr}
 800395c:	460c      	mov	r4, r1
 800395e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003962:	f000 f855 	bl	8003a10 <_lseek_r>
 8003966:	1c43      	adds	r3, r0, #1
 8003968:	89a3      	ldrh	r3, [r4, #12]
 800396a:	bf15      	itete	ne
 800396c:	6560      	strne	r0, [r4, #84]	; 0x54
 800396e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003972:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003976:	81a3      	strheq	r3, [r4, #12]
 8003978:	bf18      	it	ne
 800397a:	81a3      	strhne	r3, [r4, #12]
 800397c:	bd10      	pop	{r4, pc}

0800397e <__sclose>:
 800397e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003982:	f000 b813 	b.w	80039ac <_close_r>
	...

08003988 <_write_r>:
 8003988:	b538      	push	{r3, r4, r5, lr}
 800398a:	4d07      	ldr	r5, [pc, #28]	; (80039a8 <_write_r+0x20>)
 800398c:	4604      	mov	r4, r0
 800398e:	4608      	mov	r0, r1
 8003990:	4611      	mov	r1, r2
 8003992:	2200      	movs	r2, #0
 8003994:	602a      	str	r2, [r5, #0]
 8003996:	461a      	mov	r2, r3
 8003998:	f7fd fbb5 	bl	8001106 <_write>
 800399c:	1c43      	adds	r3, r0, #1
 800399e:	d102      	bne.n	80039a6 <_write_r+0x1e>
 80039a0:	682b      	ldr	r3, [r5, #0]
 80039a2:	b103      	cbz	r3, 80039a6 <_write_r+0x1e>
 80039a4:	6023      	str	r3, [r4, #0]
 80039a6:	bd38      	pop	{r3, r4, r5, pc}
 80039a8:	200001c8 	.word	0x200001c8

080039ac <_close_r>:
 80039ac:	b538      	push	{r3, r4, r5, lr}
 80039ae:	4d06      	ldr	r5, [pc, #24]	; (80039c8 <_close_r+0x1c>)
 80039b0:	2300      	movs	r3, #0
 80039b2:	4604      	mov	r4, r0
 80039b4:	4608      	mov	r0, r1
 80039b6:	602b      	str	r3, [r5, #0]
 80039b8:	f7fd fbc1 	bl	800113e <_close>
 80039bc:	1c43      	adds	r3, r0, #1
 80039be:	d102      	bne.n	80039c6 <_close_r+0x1a>
 80039c0:	682b      	ldr	r3, [r5, #0]
 80039c2:	b103      	cbz	r3, 80039c6 <_close_r+0x1a>
 80039c4:	6023      	str	r3, [r4, #0]
 80039c6:	bd38      	pop	{r3, r4, r5, pc}
 80039c8:	200001c8 	.word	0x200001c8

080039cc <_fstat_r>:
 80039cc:	b538      	push	{r3, r4, r5, lr}
 80039ce:	4d07      	ldr	r5, [pc, #28]	; (80039ec <_fstat_r+0x20>)
 80039d0:	2300      	movs	r3, #0
 80039d2:	4604      	mov	r4, r0
 80039d4:	4608      	mov	r0, r1
 80039d6:	4611      	mov	r1, r2
 80039d8:	602b      	str	r3, [r5, #0]
 80039da:	f7fd fbbc 	bl	8001156 <_fstat>
 80039de:	1c43      	adds	r3, r0, #1
 80039e0:	d102      	bne.n	80039e8 <_fstat_r+0x1c>
 80039e2:	682b      	ldr	r3, [r5, #0]
 80039e4:	b103      	cbz	r3, 80039e8 <_fstat_r+0x1c>
 80039e6:	6023      	str	r3, [r4, #0]
 80039e8:	bd38      	pop	{r3, r4, r5, pc}
 80039ea:	bf00      	nop
 80039ec:	200001c8 	.word	0x200001c8

080039f0 <_isatty_r>:
 80039f0:	b538      	push	{r3, r4, r5, lr}
 80039f2:	4d06      	ldr	r5, [pc, #24]	; (8003a0c <_isatty_r+0x1c>)
 80039f4:	2300      	movs	r3, #0
 80039f6:	4604      	mov	r4, r0
 80039f8:	4608      	mov	r0, r1
 80039fa:	602b      	str	r3, [r5, #0]
 80039fc:	f7fd fbbb 	bl	8001176 <_isatty>
 8003a00:	1c43      	adds	r3, r0, #1
 8003a02:	d102      	bne.n	8003a0a <_isatty_r+0x1a>
 8003a04:	682b      	ldr	r3, [r5, #0]
 8003a06:	b103      	cbz	r3, 8003a0a <_isatty_r+0x1a>
 8003a08:	6023      	str	r3, [r4, #0]
 8003a0a:	bd38      	pop	{r3, r4, r5, pc}
 8003a0c:	200001c8 	.word	0x200001c8

08003a10 <_lseek_r>:
 8003a10:	b538      	push	{r3, r4, r5, lr}
 8003a12:	4d07      	ldr	r5, [pc, #28]	; (8003a30 <_lseek_r+0x20>)
 8003a14:	4604      	mov	r4, r0
 8003a16:	4608      	mov	r0, r1
 8003a18:	4611      	mov	r1, r2
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	602a      	str	r2, [r5, #0]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	f7fd fbb4 	bl	800118c <_lseek>
 8003a24:	1c43      	adds	r3, r0, #1
 8003a26:	d102      	bne.n	8003a2e <_lseek_r+0x1e>
 8003a28:	682b      	ldr	r3, [r5, #0]
 8003a2a:	b103      	cbz	r3, 8003a2e <_lseek_r+0x1e>
 8003a2c:	6023      	str	r3, [r4, #0]
 8003a2e:	bd38      	pop	{r3, r4, r5, pc}
 8003a30:	200001c8 	.word	0x200001c8

08003a34 <__malloc_lock>:
 8003a34:	4801      	ldr	r0, [pc, #4]	; (8003a3c <__malloc_lock+0x8>)
 8003a36:	f7ff bb1d 	b.w	8003074 <__retarget_lock_acquire_recursive>
 8003a3a:	bf00      	nop
 8003a3c:	200001bc 	.word	0x200001bc

08003a40 <__malloc_unlock>:
 8003a40:	4801      	ldr	r0, [pc, #4]	; (8003a48 <__malloc_unlock+0x8>)
 8003a42:	f7ff bb18 	b.w	8003076 <__retarget_lock_release_recursive>
 8003a46:	bf00      	nop
 8003a48:	200001bc 	.word	0x200001bc

08003a4c <_read_r>:
 8003a4c:	b538      	push	{r3, r4, r5, lr}
 8003a4e:	4d07      	ldr	r5, [pc, #28]	; (8003a6c <_read_r+0x20>)
 8003a50:	4604      	mov	r4, r0
 8003a52:	4608      	mov	r0, r1
 8003a54:	4611      	mov	r1, r2
 8003a56:	2200      	movs	r2, #0
 8003a58:	602a      	str	r2, [r5, #0]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	f7fd fb36 	bl	80010cc <_read>
 8003a60:	1c43      	adds	r3, r0, #1
 8003a62:	d102      	bne.n	8003a6a <_read_r+0x1e>
 8003a64:	682b      	ldr	r3, [r5, #0]
 8003a66:	b103      	cbz	r3, 8003a6a <_read_r+0x1e>
 8003a68:	6023      	str	r3, [r4, #0]
 8003a6a:	bd38      	pop	{r3, r4, r5, pc}
 8003a6c:	200001c8 	.word	0x200001c8

08003a70 <_init>:
 8003a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a72:	bf00      	nop
 8003a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a76:	bc08      	pop	{r3}
 8003a78:	469e      	mov	lr, r3
 8003a7a:	4770      	bx	lr

08003a7c <_fini>:
 8003a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a7e:	bf00      	nop
 8003a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a82:	bc08      	pop	{r3}
 8003a84:	469e      	mov	lr, r3
 8003a86:	4770      	bx	lr
